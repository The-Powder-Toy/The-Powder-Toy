#ifdef LUACONSOLE
#ifdef _MSC_VER
#include "Platform.h"
#include "resource.h"
#endif
#include "lua/LuaCompat.h"
void luaopen_crackerk(lua_State *l)
{
#ifndef _MSC_VER
	int crackerk_luac_sz = 118799;
	const char* crackerk_luac = "local jacobsmod = tpt.version.jacob1s_mod\n\nlocal icons = {\n\011[\"delete1\"] = \"\\xEE\\x80\\x85\",\n\011[\"delete2\"] = \"\\xEE\\x80\\x86\",\n\011[\"folder\"] = \"\\xEE\\x80\\x93\"\n}\nif jacobsmod then\n\011icons = {\n\011\011[\"delete1\"] = \"\\133\",\n\011\011[\"delete2\"] = \"\\134\",\n\011\011[\"folder\"] = \"\\147\"\n\011}\nend\n\n\nif not socket then error(\"TPT version not supported\") end\nif MANAGER then error(\"manager is already running\") end\n\nlocal scriptversion = 13\nMANAGER = {[\"version\"] = \"3.11\", [\"scriptversion\"] = scriptversion, [\"hidden\"] = true}\n\nlocal type = type -- people like to overwrite this function with a global a lot\nlocal TPT_LUA_PATH = 'scripts'\nlocal PATH_SEP = '\\\\'\nlocal OS = \"WIN32\"\nlocal CHECKUPDATE = false\nlocal EXE_NAME\nif platform then\n\011OS = platform.platform()\n\011if OS ~= \"WIN32\" and OS ~= \"WIN64\" then\n\011\011PATH_SEP = '/'\n\011end\n\011EXE_NAME = platform.exeName()\n\011local temp = EXE_NAME:reverse():find(PATH_SEP)\n\011EXE_NAME = EXE_NAME:sub(#EXE_NAME-temp+2)\nelse\n\011if os.getenv('HOME') then\n\011\011PATH_SEP = '/'\n\011\011if fs.exists(\"/Applications\") then\n\011\011\011OS = \"MACOSX\"\n\011\011else\n\011\011\011OS = \"LIN64\"\n\011\011end\n\011end\n\011if OS == \"WIN32\" or OS == \"WIN64\" then\n\011\011EXE_NAME = jacobsmod and \"Jacob1\\'s Mod.exe\" or \"Powder.exe\"\n\011elseif OS == \"MACOSX\" then\n\011\011EXE_NAME = \"powder-x\" --can't restart on OS X (if using < 91.0)\n\011else\n\011\011EXE_NAME = jacobsmod and \"Jacob1\\'s Mod\" or \"powder\"\n\011end\nend\nlocal filenames = {}\nlocal num_files = 0 --downloaded scripts aren't stored in filenames\nlocal localscripts = {}\nlocal onlinescripts = {}\nlocal running = {}\nlocal requiresrestart=false\nlocal online = false\nlocal first_online = true\nlocal updatetable --temporarily holds info on script manager updates\nlocal gen_buttons\nlocal sidebutton\nlocal download_file\nlocal settings = {}\nmath.randomseed(os.time()) math.random() math.random() math.random() --some filler randoms\n\n--get line that can be saved into scriptinfo file\nlocal function scriptInfoString(info)\n\011--Write table into data format\n\011if type(info)~=\"table\" then return end\n\011local t = {}\n\011for k,v in pairs(info) do\n\011\011table.insert(t,k..\":\\\"\"..v..\"\\\"\")\n\011end\n\011local rstr = table.concat(t,\",\"):gsub(\"\\r\",\"\"):gsub(\"\\n\",\"\\\\n\")\n\011return rstr\nend\n\n--read a scriptinfo line\nlocal function readScriptInfo(list)\n\011if not list then return {} end\n\011local scriptlist = {}\n\011for i in list:gmatch(\"[^\\n]+\") do\n\011\011local t = {}\n\011\011local ID = 0\n\011\011for k,v in i:gmatch(\"(%w+):\\\"([^\\\"]*)\\\"\") do\n\011\011\011t[k]= tonumber(v) or v:gsub(\"\\r\",\"\"):gsub(\"\\\\n\",\"\\n\")\n\011\011end\n\011\011scriptlist[t.ID] = t\n\011end\n\011return scriptlist\nend\n\n--save settings\nlocal function save_last()\n\011local savestring=\"\"\n\011for script,v in pairs(running) do\n\011\011savestring = savestring..\" \\\"\"..script..\"\\\"\"\n\011end\n\011savestring = \"SAV \"..savestring..\"\\nDIR \"..TPT_LUA_PATH\n\011for k,t in pairs(settings) do\n\011for n,v in pairs(t) do\n\011\011savestring = savestring..\"\\nSET \"..k..\" \"..n..\":\\\"\"..v..\"\\\"\"\n\011end\n\011end\n\011local f\n\011if TPT_LUA_PATH == \"scripts\" then\n\011\011f = io.open(TPT_LUA_PATH..PATH_SEP..\"autorunsettings.txt\", \"w\")\n\011else\n\011\011f = io.open(\"autorunsettings.txt\", \"w\")\n\011end\n\011if f then\n\011\011f:write(savestring)\n\011\011f:close()\n\011end\n\n\011f = io.open(TPT_LUA_PATH..PATH_SEP..\"downloaded\"..PATH_SEP..\"scriptinfo\", \"w\")\n\011if f then\n\011\011for k,v in pairs(localscripts) do\n\011\011\011f:write(scriptInfoString(v)..\"\\n\")\n\011\011end\n\011\011f:close()\n\011end\nend\n\nlocal function load_downloaded()\n\011local f = io.open(TPT_LUA_PATH..PATH_SEP..\"downloaded\"..PATH_SEP..\"scriptinfo\",\"r\")\n\011if f then\n\011\011local lines = f:read(\"*a\")\n\011\011f:close()\n\011\011localscripts = readScriptInfo(lines)\n\011\011for k,v in pairs(localscripts) do\n\011\011\011if k ~= 1 then\n\011\011\011\011if not v[\"ID\"] or not v[\"name\"] or not v[\"description\"] or not v[\"path\"] or not v[\"version\"] then\n\011\011\011\011\011localscripts[k] = nil\n\011\011\011\011elseif not fs.exists(TPT_LUA_PATH..\"/\"..v[\"path\"]:gsub(\"\\\\\",\"/\")) then\n\011\011\011\011\011 localscripts[k] = nil\n\011\011\011\011end\n\011\011\011end\n\011\011end\n\011end\nend\n\n--load settings before anything else\nlocal function load_last()\n\011local f = io.open(TPT_LUA_PATH..PATH_SEP..\"autorunsettings.txt\",\"r\")\n\011if not f then\n\011\011f = io.open(\"autorunsettings.txt\",\"r\")\n\011end\n\011if f then\n\011\011local lines = {}\n\011\011local line = f:read(\"*l\")\n\011\011while line do\n\011\011\011table.insert(lines,(line:gsub(\"\\r\",\"\")))\n\011\011\011line = f:read(\"*l\")\n\011\011end\n\011\011f:close()\n\011\011for i=1, #lines do\n\011\011\011local tok=lines[i]:sub(1,3)\n\011\011\011local str=lines[i]:sub(5)\n\011\011\011if tok==\"SAV\" then\n\011\011\011\011for word in string.gmatch(str, \"\\\"(.-)\\\"\") do running[word] = true end\n\011\011\011elseif tok==\"EXE\" then\n\011\011\011\011EXE_NAME=str\n\011\011\011elseif tok==\"DIR\" then\n\011\011\011\011TPT_LUA_PATH=str\n\011\011\011elseif tok==\"SET\" then\n\011\011\011\011local ident,name,val = string.match(str,\"(.-) (.-):\\\"(.-)\\\"\")\n\011\011\011\011if settings[ident] then settings[ident][name]=val\n\011\011\011\011else settings[ident]={[name]=val} end\n\011\011\011end\n\011\011end\n\011end\n\n\011load_downloaded()\nend\nload_last()\n--get list of files in scripts folder\nlocal function load_filenames()\n\011filenames = {}\n\011local function searchRecursive(directory)\n\011\011local dirlist = fs.list(directory)\n\011\011if not dirlist then return end\n\011\011for i,v in ipairs(dirlist) do\n\011\011\011local file = directory..\"/\"..v\n\011\011\011if fs.isDirectory(file) and v ~= \"downloaded\" then\n\011\011\011\011searchRecursive(file)\n\011\011\011elseif fs.isFile(file) then\n\011\011\011\011if file:find(\"%.lua$\") then\n\011\011\011\011\011local toinsert = file:sub(#TPT_LUA_PATH+2)\n\011\011\011\011\011if OS == \"WIN32\" or OS == \"WIN64\" then\n\011\011\011\011\011\011toinsert = toinsert:gsub(\"/\", \"\\\\\") --not actually required\n\011\011\011\011\011end\n\011\011\011\011\011table.insert(filenames, toinsert)\n\011\011\011\011end\n\011\011\011end\n\011\011end\n\011end\n\011searchRecursive(TPT_LUA_PATH)\n\011table.sort(filenames, function(first,second) return first:lower() < second:lower() end)\nend\n--ui object stuff\nlocal ui_base local ui_box local ui_line local ui_text local ui_button local ui_scrollbar local ui_tooltip local ui_checkbox local ui_console local ui_window\nlocal tooltip\nui_base = {\nnew = function()\n\011local b={}\n\011b.drawlist = {}\n\011function b:drawadd(f)\n\011\011table.insert(self.drawlist,f)\n\011end\n\011function b:draw(...)\n\011\011for _,f in ipairs(self.drawlist) do\n\011\011\011if type(f)==\"function\" then\n\011\011\011\011f(self,...)\n\011\011\011end\n\011\011end\n\011end\n\011b.movelist = {}\n\011function b:moveadd(f)\n\011\011table.insert(self.movelist,f)\n\011end\n\011function b:onmove(x,y)\n\011\011for _,f in ipairs(self.movelist) do\n\011\011\011if type(f)==\"function\" then\n\011\011\011\011f(self,x,y)\n\011\011\011end\n\011\011end\n\011end\n\011return b\nend\n}\nui_box = {\nnew = function(x,y,w,h,r,g,b)\n\011local box=ui_base.new()\n\011box.x=x box.y=y box.w=w box.h=h box.x2=x+w box.y2=y+h\n\011box.r=r or 255 box.g=g or 255 box.b=b or 255\n\011function box:setcolor(r,g,b) self.r=r self.g=g self.b=b end\n\011function box:setbackground(r,g,b,a) self.br=r self.bg=g self.bb=b self.ba=a end\n\011box.drawbox=true\n\011box.drawbackground=false\n\011box:drawadd(function(self) if self.drawbackground then tpt.fillrect(self.x,self.y,self.w+1,self.h+1,self.br,self.bg,self.bb,self.ba) end\n\011\011\011\011\011\011\011\011if self.drawbox then tpt.drawrect(self.x,self.y,self.w,self.h,self.r,self.g,self.b) end end)\n\011box:moveadd(function(self,x,y)\n\011\011if x then self.x=self.x+x self.x2=self.x2+x end\n\011\011if y then self.y=self.y+y self.y2=self.y2+y end\n\011end)\n\011return box\nend\n}\nui_line = {\nnew=function(x,y,x2,y2,r,g,b)\n\011local line=ui_box.new(x,y,x2-x,y2-y,r,g,b)\n\011--Line is essentially a box, but with a different draw\n\011line.drawlist={}\n\011line:drawadd(function(self) tpt.drawline(self.x,self.y,self.x2,self.y2,self.r,self.g,self.b) end)\n\011return line\n\011end\n}\nui_text = {\nnew = function(text,x,y,r,g,b)\n\011local txt = ui_base.new()\n\011txt.text = text\n\011txt.x=x or 0 txt.y=y or 0 txt.r=r or 255 txt.g=g or 255 txt.b=b or 255\n\011function txt:setcolor(r,g,b) self.r=r self.g=g self.b=b end\n\011txt:drawadd(function(self,x,y) tpt.drawtext(x or self.x,y or self.y,self.text,self.r,self.g,self.b) end)\n\011txt:moveadd(function(self,x,y)\n\011\011if x then self.x=self.x+x end\n\011\011if y then self.y=self.y+y end\n\011end)\n\011function txt:process() return false end\n\011return txt\nend,\n--Scrolls while holding mouse over\nnewscroll = function(text,x,y,vis,r,g,b)\n\011local txt = ui_text.new(text,x,y,r,g,b)\n\011if tpt.textwidth(text)<vis then return txt end\n\011txt.visible=vis\n\011txt.length=string.len(text)\n\011txt.start=1\n\011txt.drawlist={} --reset draw\n\011txt.timer=socket.gettime()+3\n\011function txt:cuttext(self)\n\011\011local last = self.start+1\n\011\011while tpt.textwidth(self.text:sub(self.start,last))<txt.visible and last<=self.length do\n\011\011\011last = last+1\n\011\011end\n\011\011self.last=last-1\n\011end\n\011txt:cuttext(txt)\n\011txt.minlast=txt.last-1\n\011txt.ppl=((txt.visible-6)/(txt.length-txt.minlast+1))\n\011txt:drawadd(function(self,x,y)\n\011\011if socket.gettime() > self.timer then\n\011\011\011if self.last >= self.length then\n\011\011\011\011self.start = 1\n\011\011\011\011self:cuttext(self)\n\011\011\011\011self.timer = socket.gettime()+3\n\011\011\011else\n\011\011\011\011self.start = self.start + 1\n\011\011\011\011self:cuttext(self)\n\011\011\011\011if self.last >= self.length then\n\011\011\011\011\011self.timer = socket.gettime()+3\n\011\011\011\011else\n\011\011\011\011\011self.timer = socket.gettime()+.15\n\011\011\011\011end\n\011\011\011end\n\011\011end\n\011\011tpt.drawtext(x or self.x,y or self.y, self.text:sub(self.start,self.last) ,self.r,self.g,self.b)\n\011end)\n\011function txt:process(mx,my,button,event,wheel)\n\011\011if event==3 then\n\011\011\011local newlast = math.floor((mx-self.x)/self.ppl)+self.minlast\n\011\011\011if newlast<self.minlast then newlast=self.minlast end\n\011\011\011if newlast>0 and newlast~=self.last then\n\011\011\011\011local newstart=1\n\011\011\011\011while tpt.textwidth(self.text:sub(newstart,newlast))>= self.visible do\n\011\011\011\011\011newstart=newstart+1\n\011\011\011\011end\n\011\011\011\011self.start=newstart self.last=newlast\n\011\011\011\011self.timer = socket.gettime()+3\n\011\011\011end\n\011\011end\n\011end\n\011return txt\nend\n}\nui_scrollbar = {\nnew = function(x,y,h,t,m)\n\011local bar = ui_base.new() --use line object as base?\n\011bar.x=x bar.y=y bar.h=h\n\011bar.total=t\n\011bar.numshown=m\n\011bar.pos=0\n\011bar.length=math.floor((1/math.ceil(bar.total-bar.numshown+1))*bar.h)\n\011bar.soffset=math.floor(bar.pos*((bar.h-bar.length)/(bar.total-bar.numshown)))\n\011function bar:update(total,shown,pos)\n\011\011self.pos=pos or 0\n\011\011if self.pos<0 then self.pos=0 end\n\011\011self.total=total\n\011\011self.numshown=shown\n\011\011self.length= math.floor((1/math.ceil(self.total-self.numshown+1))*self.h)\n\011\011self.soffset= math.floor(self.pos*((self.h-self.length)/(self.total-self.numshown)))\n\011end\n\011function bar:move(wheel)\n\011\011self.pos = self.pos-wheel\n\011\011if self.pos < 0 then self.pos=0 end\n\011\011if self.pos > (self.total-self.numshown) then self.pos=(self.total-self.numshown) end\n\011\011self.soffset= math.floor(self.pos*((self.h-self.length)/(self.total-self.numshown)))\n\011end\n\011bar:drawadd(function(self)\n\011\011if self.total > self.numshown then\n\011\011\011tpt.drawline(self.x,self.y+self.soffset,self.x,self.y+self.soffset+self.length)\n\011\011end\n\011end)\n\011bar:moveadd(function(self,x,y)\n\011\011if x then self.x=self.x+x end\n\011\011if y then self.y=self.y+y end\n\011end)\n\011function bar:process(mx,my,button,event,wheel)\n\011\011if wheel~=0 and not MANAGER.hidden then\n\011\011\011if self.total > self.numshown then\n\011\011\011\011local previous = self.pos\n\011\011\011\011self:move(wheel)\n\011\011\011\011if self.pos~=previous then\n\011\011\011\011\011return previous-self.pos\n\011\011\011\011end\n\011\011\011end\n\011\011end\n\011\011--possibly click the bar and drag?\n\011\011return false\n\011end\n\011return bar\nend\n}\nui_button = {\nnew = function(x,y,w,h,f,text)\n\011local b = ui_box.new(x,y,w,h)\n\011b.f=f\n\011b.t=ui_text.new(text,x+2,y+2)\n\011b.drawbox=false\n\011b.clicked=false\n\011b.almostselected=false\n\011b.invert=true\n\011b:setbackground(127,127,127,125)\n\011b:drawadd(function(self)\n\011\011if self.invert and self.almostselected then\n\011\011\011self.almostselected=false\n\011\011\011tpt.fillrect(self.x,self.y,self.w,self.h)\n\011\011\011local tr=self.t.r local tg=self.t.g local tb=self.t.b\n\011\011\011b.t:setcolor(0,0,0)\n\011\011\011b.t:draw()\n\011\011\011b.t:setcolor(tr,tg,tb)\n\011\011else\n\011\011\011if tpt.mousex>=self.x and tpt.mousex<=self.x2 and tpt.mousey>=self.y and tpt.mousey<=self.y2 then\n\011\011\011\011self.drawbackground=true\n\011\011\011else\n\011\011\011\011self.drawbackground=false\n\011\011\011end\n\011\011\011b.t:draw()\n\011\011end\n\011end)\n\011b:moveadd(function(self,x,y)\n\011\011self.t:onmove(x,y)\n\011end)\n\011function b:process(mx,my,button,event,wheel)\n\011\011local clicked = self.clicked\n\011\011if event==2 then self.clicked = false end\n\011\011if mx<self.x or mx>self.x2 or my<self.y or my>self.y2 then return false end\n\011\011if event==1 then\n\011\011\011self.clicked=true\n\011\011elseif clicked then\n\011\011\011if event==3 then self.almostselected=true end\n\011\011\011if event==2 then self:f() end\n\011\011\011return true\n\011\011end\n\011end\n\011return b\nend\n}\nui_tooltip = {\nnew = function(x,y,w,text)\n\011local b = ui_box.new(x,y-1,w,0)\n\011function b:updatetooltip(tooltip)\n\011\011self.tooltip = tooltip\n\011\011self.length = #tooltip\n\011\011self.lines = 1\n\n\011\011local linebreak,lastspace = 0,nil\n\011\011for i=0,#self.tooltip do\n\011\011\011local width = tpt.textwidth(tooltip:sub(linebreak,i+1))\n\011\011\011if width > self.w/2 and tooltip:sub(i,i):match(\"[%s,_%.%-?!]\") then\n\011\011\011\011lastspace = i\n\011\011\011end\n\011\011\011local isnewline = (self.tooltip:sub(i,i) == '\\n')\n\011\011\011if width > self.w or isnewline then\n\011\011\011\011local pos = (i==#tooltip or not lastspace) and i or lastspace\n\011\011\011\011self.lines = self.lines + 1\n\011\011\011\011if self.tooltip:sub(pos,pos) == ' ' then\n\011\011\011\011\011self.tooltip = self.tooltip:sub(1,pos-1)..\"\\n\"..self.tooltip:sub(pos+1)\n\011\011\011\011elseif not isnewline then\n\011\011\011\011\011self.length = self.length + 1\n\011\011\011\011\011self.tooltip = self.tooltip:sub(1,pos-1)..\"\\n\"..self.tooltip:sub(pos)\n\011\011\011\011\011i = i + 1\n\011\011\011\011\011pos = pos + 1\n\011\011\011\011end\n\011\011\011\011linebreak = pos+1\n\011\011\011\011lastspace = nil\n\011\011\011end\n\011\011end\n\011\011self.h = self.lines*12+2\n\011\011if self.y + self.h > gfx.HEIGHT then\n\011\011\011local movement = (gfx.HEIGHT-self.h-1)-self.y\n\011\011\011if self.y+movement < 0 then\n\011\011\011\011movement = -self.y\n\011\011\011end\n\011\011\011self:onmove(0, movement)\n\011\011end\n\011\011--self.w = tpt.textwidth(self.tooltip)+3\n\011\011self.drawbox = tooltip ~= \"\"\n\011\011self.drawbackground = tooltip ~= \"\"\n\011end\n\011function b:settooltip(tooltip_)\n\011\011tooltip:onmove(tpt.mousex+5-tooltip.x, tpt.mousey+5-tooltip.y)\n\011\011tooltip:updatetooltip(tooltip_)\n\011end\n\011b:updatetooltip(text)\n\011b:setbackground(0,0,0,255)\n\011b.drawbackground = true\n\011b:drawadd(function(self)\n\011\011if self.tooltip ~= \"\" then\n\011\011\011tpt.drawtext(self.x+1,self.y+2,self.tooltip)\n\011\011end\n\011\011self:updatetooltip(\"\")\n\011end)\n\011function b:process(mx,my,button,event,wheel) end\n\011return b\nend\n}\nui_checkbox = {\nup_button = function(x,y,w,h,f,text)\n\011local b=ui_button.new(x,y,w,h,f,text)\n\011b.canupdate=false\n\011return b\nend,\nnew_button = function(x,y,w,h,splitx,f,f2,text,localscript)\n\011local b = ui_box.new(x,y,splitx,h)\n\011b.f=f b.f2=f2\n\011b.localscript=localscript\n\011b.splitx = splitx\n\011b.t=ui_text.newscroll(text,x+24,y+2,splitx-24)\n\011b.clicked=false\n\011b.selected=false\n\011b.checkbut=ui_checkbox.up_button(x+splitx+9,y,33,9,ui_button.scriptcheck,\"Update\")\n\011b.drawbox=false\n\011b:setbackground(127,127,127,100)\n\011b:drawadd(function(self)\n\011\011if self.t.text == \"\" then return end\n\011\011self.drawbackground = false\n\011\011if tpt.mousey >= self.y and tpt.mousey < self.y2 then\n\011\011\011if tpt.mousex >= self.x and tpt.mousex < self.x+8 then\n\011\011\011\011if self.localscript then\n\011\011\011\011\011tooltip:settooltip(\"delete this script\")\n\011\011\011\011else\n\011\011\011\011\011tooltip:settooltip(\"view script in browser\")\n\011\011\011\011end\n\011\011\011elseif tpt.mousex>=self.x and tpt.mousex<self.x2 then\n\011\011\011\011local script\n\011\011\011\011if online and onlinescripts[self.ID][\"description\"] then\n\011\011\011\011\011script = onlinescripts[self.ID]\n\011\011\011\011elseif not online and localscripts[self.ID] then\n\011\011\011\011\011script = localscripts[self.ID]\n\011\011\011\011end\n\011\011\011\011if script then\n\011\011\011\011\011tooltip:settooltip(script[\"name\"]..\" by \"..script[\"author\"]..\"\\n\\n\"..script[\"description\"])\n\011\011\011\011end\n\011\011\011\011self.drawbackground = true\n\011\011\011elseif tpt.mousex >= self.x2 then\n\011\011\011\011if tpt.mousex < self.x2+9 and self.running then\n\011\011\011\011\011tooltip:settooltip(online and \"downloaded\" or \"running\")\n\011\011\011\011elseif tpt.mousex >= self.x2+9 and tpt.mousex < self.x2+43 and self.checkbut.canupdate and onlinescripts[self.ID] and onlinescripts[self.ID][\"changelog\"] then\n\011\011\011\011\011tooltip:settooltip(onlinescripts[self.ID][\"changelog\"])\n\011\011\011\011end\n\011\011\011end\n\011\011end\n\011\011self.t:draw()\n\011\011if self.localscript then\n\011\011\011local swapicon = tpt.version.jacob1s_mod_build and tpt.version.jacob1s_mod_build > 76\n\011\011\011local offsetX = swapicon and 1 or 0\n\011\011\011local offsetY = swapicon and 2 or 0\n\011\011\011local innericon = swapicon and icons[\"delete1\"] or icons[\"delete2\"]\n\011\011\011local outericon = swapicon and icons[\"delete2\"] or icons[\"delete1\"]\n\011\011\011if self.deletealmostselected then\n\011\011\011\011self.deletealmostselected = false\n\011\011\011\011tpt.drawtext(self.x+1+offsetX, self.y+1+offsetY, innericon, 255, 48, 32, 255)\n\011\011\011else\n\011\011\011\011tpt.drawtext(self.x+1+offsetX, self.y+1+offsetY, innericon, 160, 48, 32, 255)\n\011\011\011end\n\011\011\011tpt.drawtext(self.x+1+offsetX, self.y+1+offsetY, outericon, 255, 255, 255, 255)\n\011\011else\n\011\011\011tpt.drawtext(self.x+1, self.y+1, icons[\"folder\"], 255, 200, 80, 255)\n\011\011end\n\011\011tpt.drawrect(self.x+12,self.y+1,8,8)\n\011\011if self.almostselected then self.almostselected=false tpt.fillrect(self.x+12,self.y+1,8,8,150,150,150)\n\011\011elseif self.selected then tpt.fillrect(self.x+12,self.y+1,8,8) end\n\011\011local filepath = self.ID and localscripts[self.ID] and localscripts[self.ID][\"path\"] or self.t.text\n\011\011if self.running then tpt.drawtext(self.x+self.splitx+2,self.y+2,online and \"D\" or \"R\") end\n\011\011if self.checkbut.canupdate then self.checkbut:draw() end\n\011end)\n\011b:moveadd(function(self,x,y)\n\011\011self.t:onmove(x,y)\n\011\011self.checkbut:onmove(x,y)\n\011end)\n\011function b:process(mx,my,button,event,wheel)\n\011\011if self.f2 and mx <= self.x+8 then\n\011\011\011if event==1 then\n\011\011\011\011self.clicked = 1\n\011\011\011elseif self.clicked == 1 then\n\011\011\011\011if event==3 then self.deletealmostselected = true end\n\011\011\011\011if event==2 then self:f2() end\n\011\011\011end\n\011\011elseif self.f and mx<=self.x+self.splitx then\n\011\011\011if event==1 then\n\011\011\011\011self.clicked = 2\n\011\011\011elseif self.clicked == 2 then\n\011\011\011\011if event==3 then self.almostselected=true end\n\011\011\011\011if event==2 then self:f() end\n\011\011\011\011self.t:process(mx,my,button,event,wheel)\n\011\011\011end\n\011\011else\n\011\011\011if self.checkbut.canupdate then self.checkbut:process(mx,my,button,event,wheel) end\n\011\011end\n\011\011return true\n\011end\n\011return b\nend,\nnew = function(x,y,w,h)\n\011local box = ui_box.new(x,y,w,h)\n\011box.list={}\n\011box.numlist = 0\n\011box.max_lines = math.floor(box.h/10)-1\n\011box.max_text_width = math.floor(box.w*0.8)\n\011box.splitx=x+box.max_text_width\n\011box.scrollbar = ui_scrollbar.new(box.x2-2,box.y+11,box.h-12,0,box.max_lines)\n\011box.lines={\n\011\011ui_line.new(box.x+1,box.y+10,box.x2-1,box.y+10,170,170,170),\n\011\011ui_line.new(box.x+22,box.y+10,box.x+22,box.y2-1,170,170,170),\n\011\011ui_line.new(box.splitx,box.y+10,box.splitx,box.y2-1,170,170,170),\n\011\011ui_line.new(box.splitx+9,box.y+10,box.splitx+9,box.y2-1,170,170,170),\n\011}\n\011function box:updatescroll()\n\011\011self.scrollbar:update(self.numlist,self.max_lines)\n\011end\n\011function box:clear()\n\011\011self.list={}\n\011\011self.numlist=0\n\011end\n\011function box:add(f,f2,text,localscript)\n\011\011local but = ui_checkbox.new_button(self.x,self.y+1+((self.numlist+1)*10),tpt.textwidth(text)+4,10,self.max_text_width,f,f2,text,localscript)\n\011\011table.insert(self.list,but)\n\011\011self.numlist = #self.list\n\011\011return but\n\011end\n\011box:drawadd(function (self)\n\011\011tpt.drawtext(self.x+24,self.y+2,\"Files in \"..TPT_LUA_PATH..\" folder\")\n\011\011tpt.drawtext(self.splitx+11,self.y+2,\"Update\")\n\011\011for i,line in ipairs(self.lines) do\n\011\011\011line:draw()\n\011\011end\n\011\011self.scrollbar:draw()\n\011\011local restart = false\n\011\011for i,check in ipairs(self.list) do\n\011\011\011local filepath = check.ID and localscripts[check.ID] and localscripts[check.ID][\"path\"] or check.t.text\n\011\011\011if not check.selected and running[filepath] then\n\011\011\011\011restart = true\n\011\011\011end\n\011\011\011if i>self.scrollbar.pos and i<=self.scrollbar.pos+self.max_lines then\n\011\011\011\011check:draw()\n\011\011\011end\n\011\011end\n\011\011requiresrestart = restart and not online\n\011end)\n\011box:moveadd(function(self,x,y)\n\011\011for i,line in ipairs(self.lines) do\n\011\011\011line:onmove(x,y)\n\011\011end\n\011\011for i,check in ipairs(self.list) do\n\011\011\011check:onmove(x,y)\n\011\011end\n\011end)\n\011function box:scroll(amount)\n\011\011local move = amount*10\n\011\011if move==0 then return end\n\011\011for i,check in ipairs(self.list) do\n\011\011\011check:onmove(0,move)\n\011\011end\n\011end\n\011function box:process(mx,my,button,event,wheel)\n\011\011if mx<self.x or mx>self.x2 or my<self.y or my>self.y2-7 then return false end\n\011\011local scrolled = self.scrollbar:process(mx,my,button,event,wheel)\n\011\011if scrolled then self:scroll(scrolled) end\n\011\011local which = math.floor((my-self.y-11)/10)+1\n\011\011if which>0 and which<=self.numlist then self.list[which+self.scrollbar.pos]:process(mx,my,button,event,wheel) end\n\011\011if event == 2 then\n\011\011\011for i,v in ipairs(self.list) do v.clicked = false end\n\011\011end\n\011\011return true\n\011end\n\011return box\nend\n}\nui_console = {\nnew = function(x,y,w,h)\n\011local con = ui_box.new(x,y,w,h)\n\011con.shown_lines = math.floor(con.h/10)\n\011con.max_lines = 300\n\011con.max_width = con.w-4\n\011con.lines = {}\n\011con.scrollbar = ui_scrollbar.new(con.x2-2,con.y+1,con.h-2,0,con.shown_lines)\n\011con:drawadd(function(self)\n\011\011self.scrollbar:draw()\n\011\011local count=0\n\011\011for i,line in ipairs(self.lines) do\n\011\011\011if i>self.scrollbar.pos and i<= self.scrollbar.pos+self.shown_lines then\n\011\011\011\011line:draw(self.x+3,self.y+3+(count*10))\n\011\011\011\011count = count+1\n\011\011\011end\n\011\011end\n\011end)\n\011con:moveadd(function(self,x,y)\n\011\011self.scrollbar:onmove(x,y)\n\011end)\n\011function con:clear()\n\011\011self.lines = {}\n\011\011self.scrollbar:update(0,con.shown_lines)\n\011end\n\011function con:addstr(str,r,g,b)\n\011\011str = tostring(str)\n\011\011local nextl = str:find('\\n')\n\011\011while nextl do\n\011\011\011local line = str:sub(1,nextl-1)\n\011\011\011self:addline(line,r,g,b)\n\011\011\011str = str:sub(nextl+1)\n\011\011\011nextl = str:find('\\n')\n\011\011end\n\011\011self:addline(str,r,g,b) --anything leftover\n\011end\n\011function con:addline(line,r,g,b)\n\011\011if not line or line==\"\" then return end --No blank lines\n\011\011table.insert(self.lines,ui_text.newscroll(line,self.x,0,self.max_width,r,g,b))\n\011\011if #self.lines>self.max_lines then table.remove(self.lines,1) end\n\011\011self.scrollbar:update(#self.lines,self.shown_lines,#self.lines-self.shown_lines)\n\011end\n\011function con:process(mx,my,button,event,wheel)\n\011\011if mx<self.x or mx>self.x2 or my<self.y or my>self.y2 then return false end\n\011\011self.scrollbar:process(mx,my,button,event,wheel)\n\011\011local which = math.floor((my-self.y-1)/10)+1\n\011\011if which>0 and which<=self.shown_lines and self.lines[which+self.scrollbar.pos] then self.lines[which+self.scrollbar.pos]:process(mx,my,button,event,wheel) end\n\011\011return true\n\011end\n\011return con\nend\n}\nui_window = {\nnew = function(x,y,w,h)\n\011local w=ui_box.new(x,y,w,h)\n\011w.sub={}\n\011function w:add(m,name)\n\011\011if name then w[name]=m end\n\011\011table.insert(self.sub,m)\n\011end\n\011w:drawadd(function(self)\n\011\011for i,sub in ipairs(self.sub) do\n\011\011\011sub:draw()\n\011\011end\n\011end)\n\011w:moveadd(function(self,x,y)\n\011\011for i,sub in ipairs(self.sub) do\n\011\011\011sub:onmove(x,y)\n\011\011end\n\011end)\n\011function w:process(mx,my,button,event,wheel)\n\011\011if mx<self.x or mx>self.x2 or my<self.y or my>self.y2 then if button == 0 then return end ui_button.sidepressed() return true end\n\011\011local ret\n\011\011for i,sub in ipairs(self.sub) do\n\011\011\011if sub:process(mx,my,button,event,wheel) then ret = true end\n\011\011end\n\011\011return ret\n\011end\n\011return w\nend\n}\n--Main window with everything!\nlocal mainwindow = ui_window.new(50,50,525,300)\nmainwindow:setbackground(10,10,10,235) mainwindow.drawbackground=true\nmainwindow:add(ui_console.new(275,148,300,189),\"menuconsole\")\nmainwindow:add(ui_checkbox.new(50,80,225,257),\"checkbox\")\ntooltip = ui_tooltip.new(0,1,250,\"\")\n\n--Some API functions you can call from other scripts\n--put 'using_manager=MANAGER ~= nil' or similar in your scripts, using_manager will be true if the manager is active\n--Print a message to the manager console, can be colored\nfunction MANAGER.print(msg,...)\n\011mainwindow.menuconsole:addstr(msg,...)\nend\n--downloads and returns a file, so you can do whatever...\nlocal download_file\nfunction MANAGER.download(url)\n\011return download_file(url)\nend\nfunction MANAGER.scriptinfo(id)\n\011local url = \"http://starcatcher.us/scripts/main.lua\"\n\011if id then\n\011\011url = url..\"?info=\"..id\n\011end\n\011local info = download_file(url)\n\011infotable = readScriptInfo(info)\n\011return id and infotable[id] or infotable\nend\n--Get various info about the system (operating system, script directory, path seperator, if socket is loaded)\nfunction MANAGER.sysinfo()\n\011return {[\"OS\"]=OS, [\"scriptDir\"]=TPT_LUA_PATH, [\"pathSep\"]=PATH_SEP, [\"exeName\"] = EXE_NAME}\nend\n--Save a setting in the autorun settings file, ident should be your script name no one else would use.\n--Name is variable name, val is the value which will be saved/returned as a string\nfunction MANAGER.savesetting(ident,name,val)\n\011ident = tostring(ident)\n\011name = tostring(name)\n\011val = tostring(val)\n\011if settings[ident] then settings[ident][name]=val\n\011else settings[ident]={[name]=val} end\n\011save_last()\nend\n--Get a previously saved value, if it has one\nfunction MANAGER.getsetting(ident,name)\n\011if settings[ident] then return settings[ident][name] end\n\011return nil\nend\n--delete a setting, leave name nil to delete all of ident\nfunction MANAGER.delsetting(ident,name)\n\011if settings[ident] then\n\011if name then settings[ident][name]=nil\n\011else settings[ident]=nil end\n\011save_last()\n\011end\nend\n\n--mniip's download thing (mostly)\nlocal pattern = \"http://w*%.?(.-)(/.*)\"\nfunction download_file(url)\n\011local _,_,host,rest = url:find(pattern)\n\011if not host or not rest then MANAGER.print(\"Bad link\") return end\n\011local conn=socket.tcp()\n\011if not conn then return end\n\011local succ=pcall(conn.connect,conn,host,80)\n\011conn:settimeout(5)\n\011if not succ then return end\n\011local userAgent = \"PowderToy/\"..tpt.version.major..\".\"..tpt.version.minor..\".\"..tpt.version.build..\" (\"..((OS == \"WIN32\" or OS == \"WIN64\") and \"WIN; \" or (os == \"MACOSX\" and \"OSX; \" or \"LIN; \"))..(jacobsmod and \"M1\" or \"M0\")..\") SCRIPT/\"..MANAGER.version\n\011succ,resp,something=pcall(conn.send,conn,\"GET \"..rest..\" HTTP/1.1\\r\\nHost: \"..host..\"\\r\\nConnection: close\\r\\nUser-Agent: \"..userAgent..\"\\r\\n\\r\\n\")\n\011if not succ then return end\n\011local data=\"\"\n\011local c=\"\"\n\011while c do\n\011\011c=conn:receive(\"*l\")\n\011\011if c then\n\011\011\011data=data..\"\\n\"..c\n\011\011end\n\011end\n\011if data==\"\" then MANAGER.print(\"no data\") return end\n\011local first,last,code = data:find(\"HTTP/1%.1 (.-) .-\\n\")\n\011while last do\n\011\011data = data:sub(last+1)\n\011\011first,last,header = data:find(\"^([^\\n]-:.-)\\n\")\n\011\011--read something from headers?\n\011\011if header then\n\011\011\011if tonumber(code)==302 then\n\011\011\011\011local _,_,new = header:find(\"^Location: (.*)\")\n\011\011\011\011if new then return download_file(new) end\n\011\011\011end\n\011\011end\n\011end\n\011if host:find(\"pastebin.com\") then --pastebin adds some weird numbers\n\011\011_,_,data=data:find(\"\\n[^\\n]*\\n(.*)\\n.+\\n$\")\n\011end\n\011return data\nend\n--Downloads to a location\nlocal function download_script(ID,location)\n\011local file = download_file(\"http://starcatcher.us/scripts/main.lua?get=\"..ID)\n\011if file then\n\011\011f=io.open(location,\"w\")\n\011\011f:write(file)\n\011\011f:close()\n\011\011return true\n\011end\n\011return false\nend\n--Restart exe (if named correctly)\nlocal function do_restart()\n\011save_last()\n\011if platform then\n\011\011platform.restart()\n\011end\n\011if OS == \"WIN32\" or OS == \"WIN64\" then\n\011\011os.execute(\"TASKKILL /IM \\\"\"..EXE_NAME..\"\\\" /F &&START .\\\\\\\"\"..EXE_NAME..\"\\\"\")\n\011elseif OS == \"OSX\" then\n\011\011MANAGER.print(\"Can't restart on OS X when using game versions less than 91.0, please manually close and reopen The Powder Toy\")\n\011\011return\n\011else\n\011\011os.execute(\"killall -s KILL \\\"\"..EXE_NAME..\"\\\" && ./\\\"\"..EXE_NAME..\"\\\"\")\n\011end\n\011MANAGER.print(\"Restart failed, do you have the exe name right?\",255,0,0)\nend\nlocal function open_link(url)\n\011if platform then\n\011\011platform.openLink(url)\n\011else\n\011\011local command = (OS == \"WIN32\" or OS == \"WIN64\") and \"start\" or (OS == \"MACOSX\" and \"open\" or \"xdg-open\")\n\011\011os.execute(command..\" \"..url)\n\011end\nend\n--TPT interface\nlocal function step()\n\011if jacobsmod then\n\011\011tpt.fillrect(0,0,gfx.WIDTH,gfx.HEIGHT,0,0,0,150)\n\011else\n\011\011tpt.fillrect(-1,-1,gfx.WIDTH,gfx.HEIGHT,0,0,0,150)\n\011end\n\011mainwindow:draw()\n\011tpt.drawtext(280,140,\"Console Output:\")\n\011if requiresrestart then\n\011\011tpt.drawtext(280,88,\"Disabling a script requires a restart for effect!\",255,50,50)\n\011end\n\011tpt.drawtext(55,55,\"Click a script to toggle, hit DONE when finished\")\n\011tpt.drawtext(474,55,\"Script Manager v\"..MANAGER.version)--479 for simple versions\n\011tooltip:draw()\nend\nlocal function mouseclick(mousex,mousey,button,event,wheel)\n\011sidebutton:process(mousex,mousey,button,event,wheel)\n\011if MANAGER.hidden then return true end\n\n\011if mousex>612 or mousey>384 then return false end\n\011mainwindow:process(mousex,mousey,button,event,wheel)\n\011return false\nend\nlocal jacobsmod_old_menu_check = false\nlocal function keypress(key,nkey,modifier,event)\n\011if jacobsmod and (key == 'o' or nkey == 96) and event == 1 then jacobsmod_old_menu_check = true end\n\011if nkey==27 and not MANAGER.hidden then MANAGER.hidden=true return false end\n\011if MANAGER.hidden then return end\n\n\011if event == 1 then\n\011\011if key == \"[\" then\n\011\011\011mainwindow:process(mainwindow.x+30, mainwindow.y+30, 0, 2, 1)\n\011\011elseif key == \"]\" then\n\011\011\011mainwindow:process(mainwindow.x+30, mainwindow.y+30, 0, 2, -1)\n\011\011end\n\011end\n\011return false\nend\n--small button on right to bring up main menu\nlocal WHITE = {0,0,255,255}\nlocal BLACK = {255,0,0,255}\nlocal ICON = math.random(2) --pick a random icon\nlocal lua_letters= {{{2,2,2,7},{2,7,4,7},{6,7,6,11},{6,11,8,11},{8,7,8,11},{10,11,12,11},{10,11,10,15},{11,13,11,13},{12,11,12,15},},\n\011{{2,3,2,13},{2,14,7,14},{4,3,4,12},{4,12,7,12},{7,3,7,12},{9,3,12,3},{9,3,9,14},{10,8,11,8},{12,3,12,14},}}\nlocal function smallstep()\n\011gfx.drawRect(sidebutton.x, sidebutton.y+1, sidebutton.w+1, sidebutton.h+1,200,200,200)\n\011local color=WHITE\n\011if not MANAGER.hidden then\n\011\011step()\n\011\011gfx.fillRect(sidebutton.x, sidebutton.y+1, sidebutton.w+1, sidebutton.h+1)\n\011\011color=BLACK\n\011end\n\011for i,dline in ipairs(lua_letters[ICON]) do\n\011\011tpt.drawline(dline[1]+sidebutton.x,dline[2]+sidebutton.y,dline[3]+sidebutton.x,dline[4]+sidebutton.y,color[1],color[2],color[3])\n\011end\n\011if jacobsmod_old_menu_check then\n\011\011local ypos = 134\n\011\011if jacobsmod and tpt.oldmenu and tpt.oldmenu()==1 then\n\011\011\011ypos = 390\n\011\011elseif tpt.num_menus then\n\011\011\011ypos = 390-16*tpt.num_menus()-(not jacobsmod and 16 or 0)\n\011\011end\n\011\011sidebutton:onmove(0, ypos-sidebutton.y)\n\011\011jacobsmod_old_menu_check = false\n\011end\nend\n--button functions on click\nfunction ui_button.reloadpressed(self)\n\011load_filenames()\n\011load_downloaded()\n\011gen_buttons()\n\011mainwindow.checkbox:updatescroll()\n\011if num_files == 0 then\n\011\011MANAGER.print(\"No scripts found in '\"..TPT_LUA_PATH..\"' folder\",255,255,0)\n\011\011fs.makeDirectory(TPT_LUA_PATH)\n\011else\n\011\011MANAGER.print(\"Reloaded file list, found \"..num_files..\" scripts\")\n\011end\nend\nfunction ui_button.selectnone(self)\n\011for i,but in ipairs(mainwindow.checkbox.list) do\n\011\011but.selected = false\n\011end\nend\nfunction ui_button.consoleclear(self)\n\011mainwindow.menuconsole:clear()\nend\nfunction ui_button.changedir(self)\n\011local last = TPT_LUA_PATH\n\011local new = tpt.input(\"Change search directory\",\"Enter the folder where your scripts are\",TPT_LUA_PATH,TPT_LUA_PATH)\n\011if new~=last and new~=\"\" then\n\011\011fs.removeFile(last..PATH_SEP..\"autorunsettings.txt\")\n\011\011MANAGER.print(\"Directory changed to \"..new,255,255,0)\n\011\011TPT_LUA_PATH = new\n\011end\n\011ui_button.reloadpressed()\n\011save_last()\nend\nfunction ui_button.uploadscript(self)\n\011if not online then\n\011\011local command = (OS == \"WIN32\" or OS == \"WIN64\") and \"start\" or (OS == \"MACOSX\" and \"open\" or \"xdg-open\")\n\011\011os.execute(command..\" \"..TPT_LUA_PATH)\n\011else\n\011\011open_link(\"https://starcatcher.us/scripts/paste.lua\")\n\011end\nend\nlocal lastpaused\nfunction ui_button.sidepressed(self)\n\011if TPTMP and TPTMP.chatHidden == false then print(\"minimize TPTMP before opening the manager\") return end\n\011MANAGER.hidden = not MANAGER.hidden\n\011ui_button.localview()\n\011if not MANAGER.hidden then\n\011\011lastpaused = tpt.set_pause()\n\011\011tpt.set_pause(1)\n\011\011ui_button.reloadpressed()\n\011else\n\011\011tpt.set_pause(lastpaused)\n\011end\nend\nlocal donebutton\nfunction ui_button.donepressed(self)\n\011MANAGER.hidden = true\n\011for i,but in ipairs(mainwindow.checkbox.list) do\n\011\011local filepath = but.ID and localscripts[but.ID][\"path\"] or but.t.text\n\011\011if but.selected then\n\011\011\011if requiresrestart then\n\011\011\011\011running[filepath] = true\n\011\011\011else\n\011\011\011\011if not running[filepath] then\n\011\011\011\011\011local status,err = pcall(dofile,TPT_LUA_PATH..PATH_SEP..filepath)\n\011\011\011\011\011if not status then\n\011\011\011\011\011\011MANAGER.print(err,255,0,0)\n\011\011\011\011\011\011print(err)\n\011\011\011\011\011\011but.selected = false\n\011\011\011\011\011else\n\011\011\011\011\011\011MANAGER.print(\"Started \"..filepath)\n\011\011\011\011\011\011running[filepath] = true\n\011\011\011\011\011end\n\011\011\011\011end\n\011\011\011end\n\011\011elseif running[filepath] then\n\011\011\011running[filepath] = nil\n\011\011end\n\011end\n\011if requiresrestart then do_restart() return end\n\011save_last()\nend\nfunction ui_button.downloadpressed(self)\n\011for i,but in ipairs(mainwindow.checkbox.list) do\n\011\011if but.selected then\n\011\011\011--maybe do better display names later\n\011\011\011local displayName\n\011\011\011local function get_script(butt)\n\011\011\011\011local script = download_file(\"http://starcatcher.us/scripts/main.lua?get=\"..butt.ID)\n\011\011\011\011displayName = \"downloaded\"..PATH_SEP..butt.ID..\" \"..onlinescripts[butt.ID].author:gsub(\"[^%w _-]\", \"_\")..\"-\"..onlinescripts[butt.ID].name:gsub(\"[^%w _-]\", \"_\")..\".lua\"\n\011\011\011\011local name = TPT_LUA_PATH..PATH_SEP..displayName\n\011\011\011\011if not fs.exists(TPT_LUA_PATH..PATH_SEP..\"downloaded\") then\n\011\011\011\011\011fs.makeDirectory(TPT_LUA_PATH..PATH_SEP..\"downloaded\")\n\011\011\011\011end\n\011\011\011\011local file = io.open(name, \"w\")\n\011\011\011\011if not file then error(\"could not open \"..name) end\n\011\011\011\011file:write(script)\n\011\011\011\011file:close()\n\011\011\011\011if localscripts[butt.ID] and localscripts[butt.ID][\"path\"] ~= displayName then\n\011\011\011\011\011local oldpath = localscripts[butt.ID][\"path\"]\n\011\011\011\011\011fs.removeFile(TPT_LUA_PATH..\"/\"..oldpath:gsub(\"\\\\\",\"/\"))\n\011\011\011\011\011running[oldpath] = nil\n\011\011\011\011end\n\011\011\011\011localscripts[butt.ID] = onlinescripts[butt.ID]\n\011\011\011\011localscripts[butt.ID][\"path\"] = displayName\n\011\011\011\011dofile(name)\n\011\011\011end\n\011\011\011local status,err = pcall(get_script, but)\n\011\011\011if not status then\n\011\011\011\011MANAGER.print(err,255,0,0)\n\011\011\011\011print(err)\n\011\011\011\011but.selected = false\n\011\011\011else\n\011\011\011\011MANAGER.print(\"Downloaded and started \"..but.t.text)\n\011\011\011\011running[displayName] = true\n\011\011\011end\n\011\011end\n\011end\n\011MANAGER.hidden = true\n\011ui_button.localview()\n\011save_last()\nend\n\nfunction ui_button.pressed(self)\n\011self.selected = not self.selected\nend\nfunction ui_button.delete(self)\n\011--there is no tpt.confirm() yet\n\011if tpt.input(\"Delete File\", \"Delete \"..self.t.text..\"?\", \"yes\", \"no\") == \"yes\" then\n\011\011local filepath = self.ID and localscripts[self.ID][\"path\"] or self.t.text\n\011\011fs.removeFile(TPT_LUA_PATH..\"/\"..filepath:gsub(\"\\\\\",\"/\"))\n\011\011if running[filepath] then running[filepath] = nil end\n\011\011if localscripts[self.ID] then localscripts[self.ID] = nil end\n\011\011save_last()\n\011\011ui_button.localview()\n\011\011load_filenames()\n\011\011gen_buttons()\n\011end\nend\nfunction ui_button.viewonline(self)\n\011open_link(\"https://starcatcher.us/scripts?view=\"..self.ID)\nend\nfunction ui_button.scriptcheck(self)\n\011local oldpath = localscripts[self.ID][\"path\"]\n\011local newpath = \"downloaded\"..PATH_SEP..self.ID..\" \"..onlinescripts[self.ID].author:gsub(\"[^%w _-]\", \"_\")..\"-\"..onlinescripts[self.ID].name:gsub(\"[^%w _-]\", \"_\")..\".lua\"\n\011if download_script(self.ID,TPT_LUA_PATH..PATH_SEP..newpath) then\n\011\011self.canupdate = false\n\011\011localscripts[self.ID] = onlinescripts[self.ID]\n\011\011localscripts[self.ID][\"path\"] = newpath\n\011\011if oldpath:gsub(\"\\\\\",\"/\") ~= newpath:gsub(\"\\\\\",\"/\") then\n\011\011\011fs.removeFile(TPT_LUA_PATH..\"/\"..oldpath:gsub(\"\\\\\",\"/\"))\n\011\011\011if running[oldpath] then\n\011\011\011\011running[newpath],running[oldpath] = running[oldpath],nil\n\011\011\011end\n\011\011end\n\011\011if running[newpath] then\n\011\011\011do_restart()\n\011\011else\n\011\011\011save_last()\n\011\011\011MANAGER.print(\"Updated \"..onlinescripts[self.ID][\"name\"])\n\011\011end\n\011end\nend\nfunction ui_button.doupdate(self)\n\011if jacobsmod and jacobsmod >= 30 then\n\011\011fileSystem.move(\"scriptmanager.lua\", \"scriptmanagerold.lua\")\n\011\011download_script(1, 'scriptmanager.lua')\n\011else\n\011\011fileSystem.move(\"autorun.lua\", \"autorunold.lua\")\n\011\011download_script(1, 'autorun.lua')\n\011end\n\011localscripts[1] = updatetable[1]\n\011do_restart()\nend\nlocal uploadscriptbutton\nfunction ui_button.localview(self)\n\011if online then\n\011\011online = false\n\011\011gen_buttons()\n\011\011donebutton.t.text = \"DONE\"\n\011\011donebutton.w = 29 donebutton.x2 = donebutton.x + donebutton.w\n\011\011donebutton.f = ui_button.donepressed\n\011\011uploadscriptbutton.t.text = icons[\"folder\"]..\" Script Folder\"\n\011end\nend\nfunction ui_button.onlineview(self)\n\011if not online then\n\011\011online = true\n\011\011gen_buttons()\n\011\011donebutton.t.text = \"DOWNLOAD\"\n\011\011donebutton.w = 55 donebutton.x2 = donebutton.x + donebutton.w\n\011\011donebutton.f = ui_button.downloadpressed\n\011\011uploadscriptbutton.t.text = \"Upload Script\"\n\011end\nend\n--add buttons to window\ndonebutton = ui_button.new(55,339,29,10,ui_button.donepressed,\"DONE\")\nmainwindow:add(donebutton)\nmainwindow:add(ui_button.new(134,339,40,10,ui_button.sidepressed,\"CANCEL\"))\n--mainwindow:add(ui_button.new(152,339,29,10,ui_button.selectnone,\"NONE\"))\nlocal nonebutton = ui_button.new(62,81,8,8,ui_button.selectnone,\"\")\nnonebutton.drawbox = true\nmainwindow:add(nonebutton)\nmainwindow:add(ui_button.new(538,339,33,10,ui_button.consoleclear,\"CLEAR\"))\nmainwindow:add(ui_button.new(278,67,39,10,ui_button.reloadpressed,\"RELOAD\"))\nmainwindow:add(ui_button.new(378,67,51,10,ui_button.changedir,\"Change dir\"))\nuploadscriptbutton = ui_button.new(478,67,79,10,ui_button.uploadscript, icons[\"folder\"]..\" Script Folder\")\nmainwindow:add(uploadscriptbutton)\nlocal tempbutton = ui_button.new(60, 65, 30, 10, ui_button.localview, \"Local\")\ntempbutton.drawbox = true\nmainwindow:add(tempbutton)\ntempbutton = ui_button.new(100, 65, 35, 10, ui_button.onlineview, \"Online\")\ntempbutton.drawbox = true\nmainwindow:add(tempbutton)\nlocal ypos = 134\nif jacobsmod and tpt.oldmenu and tpt.oldmenu()==1 then\n\011ypos = 390\nelseif tpt.num_menus then\n\011ypos = 390-16*tpt.num_menus()-(not jacobsmod and 16 or 0)\nend\nsidebutton = ui_button.new(gfx.WIDTH-16,ypos,14,15,ui_button.sidepressed,'')\n\nlocal function gen_buttons_local()\n\011local count = 0\n\011local sorted = {}\n\011for k,v in pairs(localscripts) do if v.ID ~= 1 then table.insert(sorted, v) end end\n\011table.sort(sorted, function(first,second) return first.name:lower() < second.name:lower() end)\n\011for i,v in ipairs(sorted) do\n\011\011local check = mainwindow.checkbox:add(ui_button.pressed,ui_button.delete,v.name,true)\n\011\011check.ID = v.ID\n\011\011if running[v.path] then\n\011\011\011check.running = true\n\011\011\011check.selected = true\n\011\011end\n\011\011count = count + 1\n\011end\n\011if #sorted >= 5 and #filenames >= 5 then\n\011\011mainwindow.checkbox:add(nil, nil, \"\", false) --empty space to separate things\n\011end\n\011for i=1,#filenames do\n\011\011local check = mainwindow.checkbox:add(ui_button.pressed,ui_button.delete,filenames[i],true)\n\011\011if running[filenames[i]] then\n\011\011\011check.running = true\n\011\011\011check.selected = true\n\011\011end\n\011end\n\011num_files = count + #filenames\nend\nlocal function gen_buttons_online()\n\011local list = download_file(\"http://starcatcher.us/scripts/main.lua\")\n\011onlinescripts = readScriptInfo(list)\n\011local sorted = {}\n\011for k,v in pairs(onlinescripts) do table.insert(sorted, v) end\n\011table.sort(sorted, function(first,second) return first.ID < second.ID end)\n\011for k,v in pairs(sorted) do\n\011\011local check = mainwindow.checkbox:add(ui_button.pressed, ui_button.viewonline, v.name, false)\n\011\011check.ID = v.ID\n\011\011check.checkbut.ID = v.ID\n\011\011if localscripts[v.ID] then\n\011\011\011check.running = true\n\011\011\011if tonumber(v.version) > tonumber(localscripts[check.ID].version) then\n\011\011\011\011check.checkbut.canupdate = true\n\011\011\011end\n\011\011end\n\011end\n\011if first_online then\n\011\011first_online = false\n\011\011local updateinfo = download_file(\"http://starcatcher.us/scripts/main.lua?info=1\")\n\011\011updatetable = readScriptInfo(updateinfo)\n\011\011if not updatetable[1] then return end\n\011\011if tonumber(updatetable[1].version) > scriptversion then\n\011\011\011local updatebutton = ui_button.new(278,127,40,10,ui_button.doupdate,\"UPDATE\")\n\011\011\011updatebutton.t:setcolor(25,255,25)\n\011\011\011mainwindow:add(updatebutton)\n\011\011\011MANAGER.print(\"A script manager update is available! Click UPDATE\",25,255,55)\n\011\011\011MANAGER.print(updatetable[1].changelog,25,255,55)\n\011\011end\n\011end\nend\ngen_buttons = function()\n\011mainwindow.checkbox:clear()\n\011if online then\n\011\011gen_buttons_online()\n\011else\n\011\011gen_buttons_local()\n\011end\n\011mainwindow.checkbox:updatescroll()\nend\ngen_buttons()\n\n--register manager first\ntpt.register_step(smallstep)\n--load previously running scripts\nlocal started = \"\"\nfor prev,v in pairs(running) do\n\011local status,err = pcall(dofile,TPT_LUA_PATH..PATH_SEP..prev)\n\011if not status then\n\011\011MANAGER.print(err,255,0,0)\n\011\011running[prev] = nil\n\011else\n\011\011started=started..\" \"..prev\n\011\011local newbut = mainwindow.checkbox:add(ui_button.pressed,prev,nil,false)\n\011\011newbut.selected=true\n\011end\nend\nsave_last()\nif started~=\"\" then\n\011MANAGER.print(\"Auto started\"..started)\nend\ntpt.register_mouseevent(mouseclick)\ntpt.register_keypress(keypress)\n\n\n--Cracker64's Powder Toy Multiplayer\n--I highly recommend to use my Autorun Script Manager\n\nlocal versionstring = \"0.101\"\n\n--TODO's\n--FIGH,STKM,STK2,LIGH need a few more creation adjustments\n--Some more server functions\n-------------------------------------------------------\n\n--CHANGES:\n--Lots of Fixes\n--More colors!\n--ESC key will unfocus, then minimize chat\n--Changes from jacob, including: Support jacobsMod, keyrepeat\n--Support replace mode\n\nif TPTMP then if TPTMP.version <= 4 then TPTMP.disableMultiplayer() else error(\"newer version already running\") end end local get_name = tpt.get_name -- if script already running, replace it\nTPTMP = {[\"version\"] = 4, [\"versionStr\"] = versionstring} -- script version sent on connect to ensure server protocol is the same\nlocal issocket,socket = pcall(require,\"socket\")\nif not sim.clearRect then error\"Tpt version not supported\" end\nlocal using_manager = false\nlocal type = type -- people like to overwrite this function with a global a lot\nlocal _print = print\nif MANAGER ~= nil or MANAGER_EXISTS then\n\011using_manager = true\n\011_print = MANAGER and MANAGER.print or MANAGER_PRINT\nelse\n\011_print = print\nend\nlocal hooks_enabled = false --hooks only enabled once you maximize the button\n\nlocal PORT = 34403 --Change 34403 to your desired port\nlocal KEYBOARD = 1 --only change if you have issues. Only other option right now is 2(finnish).\n--Local player vars we need to keep\nlocal L = {mousex=0, mousey=0, realMouseX=0, realMouseY=0, brushx=0, brushy=0, sell=1, sela=296, selr=0, selrep=0, replacemode = 0, mButt=0, mEvent=0, isDrawing=false, dcolour=0, stick2=false, chatHidden=true, flashChat=false,\nshift=false, alt=false, ctrl=false, tabs = false, z=false, skipClick=false, pauseNextFrame=false, copying=false, stamp=false, placeStamp=false, lastStamp=nil, lastCopy=nil, smoved=false, rotate=false, sendScreen=false}\n\nlocal tptversion = tpt.version.build\nlocal jacobsmod = tpt.version.jacob1s_mod~=nil\nmath.randomseed(os.time())\nlocal username = get_name()\nif username == \"\" then\n\011username = \"Guest\"..math.random(10000,99999)\nend\nlocal chatwindow\nlocal con = {connected = false,\n\011\011 socket = nil,\n\011\011 members = nil,\n\011\011 pingTime = os.time()+60}\nlocal function disconnected(reason)\n\011if con.socket then\n\011\011con.socket:close()\n\011end\n\011if reason then\n\011\011chatwindow:addline(reason,255,50,50)\n\011else\n\011\011chatwindow:addline(\"Connection was closed\",255,50,50)\n\011end\n\011con.connected = false\n\011con.members = {}\nend\nlocal function conSend(cmd,msg,endNull)\n\011if not con.connected then return false,\"Not connected\" end\n\011msg = msg or \"\"\n\011if endNull then msg = msg..\"\\0\" end\n\011if cmd then msg = string.char(cmd)..msg end\n\011con.socket:settimeout(10)\n\011con.socket:send(msg)\n\011con.socket:settimeout(0)\nend\nlocal function joinChannel(chan)\n\011conSend(16,chan,true)\n\011--send some things to new channel\n\011conSend(34,string.char(L.brushx,L.brushy))\n\011conSend(37,string.char(math.floor(L.sell/256),L.sell%256))\n\011conSend(37,string.char(math.floor(64 + L.sela/256),L.sela%256))\n\011conSend(37,string.char(math.floor(128 + L.selr/256),L.selr%256))\n\011conSend(37,string.char(math.floor(192 + L.selrep/256),L.selrep%256))\n\011conSend(38,L.replacemode)\n\011conSend(65,string.char(math.floor(L.dcolour/16777216),math.floor(L.dcolour/65536)%256,math.floor(L.dcolour/256)%256,L.dcolour%256))\nend\nlocal function connectToServer(ip,port,nick)\n\011if con.connected then return false,\"Already connected\" end\n\011ip = ip or \"tptmp.starcatcher.us\"\n\011port = port or PORT\n\011local sock = socket.tcp()\n\011sock:settimeout(10)\n\011local s,r = sock:connect(ip,port)\n\011if not s then return false,r end\n\011sock:settimeout(0)\n\011sock:setoption(\"keepalive\",true)\n\011sock:send(string.char(tpt.version.major)..string.char(tpt.version.minor)..string.char(TPTMP.version)..nick..\"\\0\")\n\011local c,r\n\011while not c do\n\011c,r = sock:receive(1)\n\011if not c and r~=\"timeout\" then break end\n\011end\n\011if not c and r~=\"timeout\" then return false,r end\n\n\011if c~= \"\\1\" then\n\011if c==\"\\0\" then\n\011\011local err=\"\"\n\011\011c,r = sock:receive(1)\n\011\011while c~=\"\\0\" do\n\011\011err = err..c\n\011\011c,r = sock:receive(1)\n\011\011end\n\011\011if err==\"This nick is already on the server\" then\n\011\011\011nick = nick:gsub(\"(.)$\",function(s) local n=tonumber(s) if n and n+1 <= 9 then return n+1 else return nick:sub(-1)..'0' end end)\n\011\011\011return connectToServer(ip,port,nick)\n\011\011end\n\011\011return false,err\n\011end\n\011return false,\"Bad Connect\"\n\011end\n\n\011con.socket = sock\n\011con.connected = true\n\011username = nick\n\011conSend(34,string.char(L.brushx,L.brushy))\n\011conSend(37,string.char(math.floor(L.sell/256),L.sell%256))\n\011conSend(37,string.char(math.floor(64 + L.sela/256),L.sela%256))\n\011conSend(37,string.char(math.floor(128 + L.selr/256),L.selr%256))\n\011conSend(37,string.char(math.floor(192 + L.selrep/256),L.selrep%256))\n\011conSend(38,L.replacemode)\n\011conSend(65,string.char(math.floor(L.dcolour/16777216),math.floor(L.dcolour/65536)%256,math.floor(L.dcolour/256)%256,L.dcolour%256))\n\011return true\nend\n--get up to a null (\\0)\nlocal function conGetNull()\n\011con.socket:settimeout(nil)\n\011local c,r = con.socket:receive(1)\n\011if not c and r ~= \"timeout\" then disconnected() return nil end\n\011local rstring=\"\"\n\011while c~=\"\\0\" do\n\011rstring = rstring..c\n\011c,r = con.socket:receive(1)\n\011if not c and r ~= \"timeout\" then disconnected() return nil end\n\011end\n\011con.socket:settimeout(0)\n\011return rstring\nend\n--get next char/byte\nlocal function cChar()\n\011con.socket:settimeout(nil)\n\011local c,r = con.socket:receive(1)\n\011con.socket:settimeout(0)\n\011if not c then disconnected() end\n\011return c\nend\nlocal function cByte()\n\011local byte = cChar()\n\011return byte and byte:byte() or nil\nend\n--return table of arguments\nlocal function getArgs(msg)\n\011if not msg then return {} end\n\011local args = {}\n\011for word in msg:gmatch(\"([^%s%c]+)\") do\n\011table.insert(args,word)\n\011end\n\011return args\nend\n\nlocal ui_base local ui_box local ui_text local ui_button local ui_scrollbar local ui_inputbox local ui_chatbox\nui_base = {\nnew = function()\n\011local b={}\n\011b.drawlist = {}\n\011function b:drawadd(f)\n\011\011table.insert(self.drawlist,f)\n\011end\n\011function b:draw(...)\n\011\011for _,f in ipairs(self.drawlist) do\n\011\011\011if type(f)==\"function\" then\n\011\011\011\011f(self,...)\n\011\011\011end\n\011\011end\n\011end\n\011b.movelist = {}\n\011function b:moveadd(f)\n\011\011table.insert(self.movelist,f)\n\011end\n\011function b:onmove(x,y)\n\011\011for _,f in ipairs(self.movelist) do\n\011\011\011if type(f)==\"function\" then\n\011\011\011\011f(self,x,y)\n\011\011\011end\n\011\011end\n\011end\n\011return b\nend\n}\nui_box = {\nnew = function(x,y,w,h,r,g,b)\n\011local box=ui_base.new()\n\011box.x=x box.y=y box.w=w box.h=h box.x2=x+w box.y2=y+h\n\011box.r=0 box.g=0 box.b=b or 255\n\011function box:setcolor(r,g,b) self.r=r self.g=g self.b=b end\n\011function box:setbackground(r,g,b,a) self.br=r self.bg=g self.bb=b self.ba=a end\n\011box.drawbox=true\n\011box.drawbackground=false\n\011box:drawadd(function(self) if self.drawbackground then gfx.fillRect(self.x,self.y,self.w+1,self.h+1,self.br,self.bg,self.bb,self.ba) end\n\011\011\011\011\011\011\011\011if self.drawbox then gfx.drawRect(self.x,self.y,self.w+1,self.h+1,self.r,self.g,self.b) end end)\n\011box:moveadd(function(self,x,y)\n\011\011if x then self.x=self.x+x self.x2=self.x2+x end\n\011\011if y then self.y=self.y+y self.y2=self.y2+y end\n\011end)\n\011return box\nend\n}\nui_text = {\nnew = function(text,x,y,r,g,b)\n\011local txt = ui_base.new()\n\011txt.text = text\n\011txt.x=x or 0 txt.y=y or 0 txt.r=r or 255 txt.g=g or 255 txt.b=b or 255\n\011function txt:setcolor(r,g,b) self.r=r self.g=g self.b=b end\n\011txt:drawadd(function(self,x,y) gfx.drawText(x or self.x,y or self.y,self.text,self.r,self.g,self.b) end)\n\011txt:moveadd(function(self,x,y)\n\011\011if x then self.x=self.x+x end\n\011\011if y then self.y=self.y+y end\n\011end)\n\011return txt\nend,\n--Scrolls while holding mouse over\nnewscroll = function(text,x,y,vis,force,r,g,b)\n\011local txt = ui_text.new(text,x,y,r,g,b)\n\011if not force and tpt.textwidth(text)<vis then return txt end\n\011txt.visible=vis\n\011txt.length=string.len(text)\n\011txt.start=1\n\011local last=2\n\011while tpt.textwidth(text:sub(1,last))<vis and last<=txt.length do\n\011\011last=last+1\n\011end\n\011txt.last=last-1\n\011txt.minlast=last-1\n\011txt.ppl=((txt.visible-6)/(txt.length-txt.minlast+1))\n\011function txt:update(text,pos)\n\011\011if text then\n\011\011\011self.text=text\n\011\011\011self.length=string.len(text)\n\011\011\011local last=2\n\011\011\011while tpt.textwidth(text:sub(1,last))<self.visible and last<=self.length do\n\011\011\011\011last=last+1\n\011\011\011end\n\011\011\011self.minlast=last-1\n\011\011\011self.ppl=((self.visible-6)/(self.length-self.minlast+1))\n\011\011\011if not pos then self.last=self.minlast end\n\011\011end\n\011\011if pos then\n\011\011\011if pos>=self.last and pos<=self.length then --more than current visible\n\011\011\011\011local newlast = pos\n\011\011\011\011local newstart=1\n\011\011\011\011while tpt.textwidth(self.text:sub(newstart,newlast))>= self.visible do\n\011\011\011\011\011newstart=newstart+1\n\011\011\011\011end\n\011\011\011\011self.start=newstart self.last=newlast\n\011\011\011elseif pos<self.start and pos>0 then --position less than current visible\n\011\011\011\011local newstart=pos\n\011\011\011\011local newlast=pos+1\n\011\011\011\011while tpt.textwidth(self.text:sub(newstart,newlast))<self.visible and newlast<self.length do\n\011\011\011\011\011\011newlast=newlast+1\n\011\011\011\011end\n\011\011\011\011self.start=newstart self.last=newlast-1\n\011\011\011end\n\011\011\011--keep strings as long as possible (pulls from left)\n\011\011\011local newlast=self.last\n\011\011\011if newlast<self.minlast then newlast=self.minlast end\n\011\011\011local newstart=1\n\011\011\011while tpt.textwidth(self.text:sub(newstart,newlast))>= self.visible do\n\011\011\011\011\011newstart=newstart+1\n\011\011\011end\n\011\011\011self.start=newstart self.last=newlast\n\011\011end\n\011end\n\011txt.drawlist={} --reset draw\n\011txt:drawadd(function(self,x,y)\n\011\011gfx.drawText(x or self.x,y or self.y, self.text:sub(self.start,self.last) ,self.r,self.g,self.b)\n\011end)\n\011function txt:mouseMove(mx,my,dX,dY)\n\011\011local newlast = math.floor((mx-self.x)/self.ppl)+self.minlast\n\011\011if newlast<self.minlast then newlast=self.minlast end\n\011\011if newlast>0 and newlast~=self.last then\n\011\011\011local newstart=1\n\011\011\011while tpt.textwidth(self.text:sub(newstart,newlast))>= self.visible do\n\011\011\011\011newstart=newstart+1\n\011\011\011end\n\011\011\011self.start=newstart self.last=newlast\n\011\011end\n\011end\n\011return txt\nend\n}\nui_inputbox = {\nnew=function(x,y,w,h)\n\011local intext=ui_box.new(x,y,w,h)\n\011intext.cursor=0\n\011intext.line=1\n\011intext.currentline = \"\"\n\011intext.focus=false\n\011intext.t=ui_text.newscroll(\"\",x+2,y+2,w-2,true)\n\011intext.history={}\n\011intext.max_history=200\n\011intext.ratelimit = 0\n\011intext:drawadd(function(self)\n\011\011local cursoradjust=tpt.textwidth(self.t.text:sub(self.t.start,self.cursor))+2\n\011\011gfx.drawLine(self.x+cursoradjust,self.y,self.x+cursoradjust,self.y+10,255,255,255)\n\011\011self.t:draw()\n\011end)\n\011intext:moveadd(function(self,x,y) self.t:onmove(x,y) end)\n\011function intext:setfocus(focus)\n\011\011self.focus=focus\n\011\011if focus then self:setcolor(255,255,0)\n\011\011else self:setcolor(255,255,255) end\n\011end\n\011function intext:movecursor(amt)\n\011\011self.cursor = self.cursor+amt\n\011\011if self.cursor>self.t.length then self.cursor = self.t.length end\n\011\011if self.cursor<0 then self.cursor = 0 return end\n\011end\n\011function intext:addhistory(str)\n\011\011self.history[#self.history+1] = str\n\011\011if #self.history >= self.max_history then\n\011\011\011table.remove(self.history, 1)\n\011\011end\n\011end\n\011function intext:moveline(amt)\n\011\011self.line = self.line+amt\n\011\011local max = #self.currentline and #self.history+2 or #self.history+1\n\011\011if self.line>max then self.line=max\n\011\011elseif self.line<1 then self.line=1 end\n\011\011local history = self.history[self.line] or \"\"\n\011\011if self.line == #self.history+1 then history = self.currentline end\n\011\011self.cursor = string.len(history)\n\011\011self.t:update(history, self.cursor)\n\011end\n\011function intext:keypress(key, scan, rep, shift, ctrl, alt)\n\011\011if not self.focus then\n\011\011\011if key == 13 then\n\011\011\011\011self:setfocus(true)\n\011\011\011end\n\011\011\011return\n\011\011end\n\011\011-- Esc\n\011\011if key == 27 then\n\011\011\011self:setfocus(false)\n\011\011-- Enter\n\011\011elseif key == 13 and not rep then\n\011\011\011if socket.gettime() < self.ratelimit then\n\011\011\011\011return\n\011\011\011end\n\011\011\011local text = self.t.text\n\011\011\011if text == \"\" then\n\011\011\011\011self:setfocus(false)\n\011\011\011else\n\011\011\011\011self.cursor = 0\n\011\011\011\011self.t.text = \"\"\n\011\011\011\011self:addhistory(text)\n\011\011\011\011self.line = #self.history + 1\n\011\011\011\011self.currentline = \"\"\n\011\011\011\011self.ratelimit = socket.gettime() + 1\n\011\011\011\011return text\n\011\011\011end\n\011\011-- Up\n\011\011elseif key == 1073741906 then\n\011\011\011if socket.gettime() < self.ratelimit then\n\011\011\011\011return\n\011\011\011end\n\011\011\011self:moveline(-1)\n\011\011-- Down\n\011\011elseif key == 1073741905 then\n\011\011\011self:moveline(1)\n\011\011-- Right\n\011\011elseif key == 1073741903 then\n\011\011\011self:movecursor(1)\n\011\011\011self.t:update(nil, self.cursor)\n\011\011-- Left\n\011\011elseif key == 1073741904 then\n\011\011\011self:movecursor(-1)\n\011\011\011self.t:update(nil, self.cursor)\n\011\011end\n\n\011\011local newstr\n\011\011-- Backspace\n\011\011if key == 8 then\n\011\011\011if self.cursor > 0 then\n\011\011\011\011newstr = self.t.text:sub(1,self.cursor-1) .. self.t.text:sub(self.cursor+1)\n\011\011\011\011self:movecursor(-1)\n\011\011\011end\n\011\011-- Delete\n\011\011elseif key == 127 then\n\011\011\011newstr=self.t.text:sub(1,self.cursor) .. self.t.text:sub(self.cursor+2)\n\011\011-- Tab\n\011\011elseif key == 9 then\n\011\011\011local nickstart, nickend, nick = self.t.text:sub(1,self.cursor+1):find(\"([^%s%c]+)\"..(self.cursor == #self.t.text and \"\" or \" \")..\"$\")\n\011\011\011if con.members and nick then\n\011\011\011\011for k, v in pairs(con.members) do\n\011\011\011\011\011if v.name:sub(1, #nick) == nick then\n\011\011\011\011\011\011nick = v.name\n\011\011\011\011\011\011if nickstart == 1 then\n\011\011\011\011\011\011\011nick = nick .. \":\"\n\011\011\011\011\011\011end\n\011\011\011\011\011\011newstr = self.t.text:sub(1,nickstart-1)..nick..\" \"..self.t.text:sub(nickend+1, #self.t.text)\n\011\011\011\011\011\011self.cursor = nickstart + #nick\n\011\011\011\011\011end\n\011\011\011\011end\n\011\011\011end\n\011\011end\n\011\011if newstr then\n\011\011\011self.t:update(newstr,self.cursor)\n\011\011end\n\011end\n\011function intext:textinput(text)\n\011\011if not self.focus then\n\011\011\011return\n\011\011end\n\011\011-- TPT font has no unicode characters at the moment, nor does it have a good enough api to support them\n\011\011if #text > 1 or string.byte(text) < 20 or string.byte(text) > 126 then return end\n\011\011newstr = self.t.text:sub(1, self.cursor) .. text .. self.t.text:sub(self.cursor + 1)\n\011\011self.currentline = newstr\n\011\011self.t:update(newstr, self.cursor + 1)\n\011\011self:movecursor(1)\n\011end\n\011return intext\nend\n}\nui_scrollbar = {\nnew = function(x,y,h,t,m)\n\011local bar = ui_base.new() --use line object as base?\n\011bar.x=x bar.y=y bar.h=h\n\011bar.total=t\n\011bar.numshown=m\n\011bar.pos=0\n\011bar.length=math.floor((1/math.ceil(bar.total-bar.numshown+1))*bar.h)\n\011bar.soffset=math.floor(bar.pos*((bar.h-bar.length)/(bar.total-bar.numshown)))\n\011function bar:update(total,shown,pos)\n\011\011self.pos=pos or 0\n\011\011if self.pos<0 then self.pos=0 end\n\011\011self.total=total\n\011\011self.numshown=shown\n\011\011self.length= math.floor((1/math.ceil(self.total-self.numshown+1))*self.h)\n\011\011self.soffset= math.floor(self.pos*((self.h-self.length)/(self.total-self.numshown)))\n\011end\n\011function bar:move(wheel)\n\011\011self.pos = self.pos-wheel\n\011\011if self.pos < 0 then self.pos=0 end\n\011\011if self.pos > (self.total-self.numshown) then self.pos=(self.total-self.numshown) end\n\011\011self.soffset= math.floor(self.pos*((self.h-self.length)/(self.total-self.numshown)))\n\011end\n\011bar:drawadd(function(self)\n\011\011if self.total > self.numshown then\n\011\011\011gfx.drawLine(self.x,self.y+self.soffset,self.x,self.y+self.soffset+self.length)\n\011\011end\n\011end)\n\011bar:moveadd(function(self,x,y)\n\011\011if x then self.x=self.x+x end\n\011\011if y then self.y=self.y+y end\n\011end)\n\011function bar:mouseWheel(mx,my,wheel)\n\011\011if wheel~=0 and not hidden_mode then\n\011\011\011if self.total > self.numshown then\n\011\011\011\011local previous = self.pos\n\011\011\011\011self:move(wheel)\n\011\011\011\011if self.pos~=previous then\n\011\011\011\011\011return wheel\n\011\011\011\011end\n\011\011\011end\n\011\011end\n\011end\n\011return bar\nend\n}\nui_button = {\nnew = function(x,y,w,h,f,text)\n\011local b = ui_box.new(x,y,w,h)\n\011b.f=f\n\011b.t=ui_text.new(text,x+2,y+2)\n\011b.drawbox=false\n\011b.clicked = false\n\011b.invert = false\n\011b:drawadd(function(self)\n\011\011if self.clicked or self.invert then\n\011\011\011tpt.fillrect(self.x,self.y,self.w,self.h)\n\011\011\011local tr=self.t.r local tg=self.t.g local tb=self.t.b\n\011\011\011b.t:setcolor(0,0,0)\n\011\011\011b.t:draw()\n\011\011\011b.t:setcolor(tr,tg,tb)\n\011\011else\n\011\011\011b.t:draw()\n\011\011end\n\011end)\n\011b:moveadd(function(self,x,y)\n\011\011self.t:onmove(x,y)\n\011end)\n\011function b:mouseDown(mouseX, mouseY, button, reason)\n\011\011if mouseX >= self.x and mouseX <= self.x2 and mouseY >= self.y and mouseY <= self.y2 then\n\011\011\011self.clicked = true\n\011\011\011return true\n\011\011end\n\011end\n\011function b:mouseMove(mouseX, mouseY, dX, dY)\n\011\011if not (mouseX >= self.x and mouseX <= self.x2 and mouseY >= self.y and mouseY <= self.y2) then\n\011\011\011self.clicked = false\n\011\011end\n\011end\n\011function b:mouseUp(mouseX, mouseY, button, reason)\n\011\011if self.clicked and mouseX >= self.x and mouseX <= self.x2 and mouseY >= self.y and mouseY <= self.y2 then\n\011\011\011self:f()\n\011\011\011return true\n\011\011end\n\011end\n\011return b\nend\n}\nui_chatbox = {\nnew=function(x,y,w,h)\n\011local chat=ui_box.new(x,y,w,h)\n\011chat.moving=false\n\011chat.lastx=0\n\011chat.lasty=0\n\011chat.relx=0\n\011chat.rely=0\n\011chat.shown_lines=math.floor(chat.h/10)-2 --one line for top, one for chat\n\011chat.max_width=chat.w-4\n\011chat.max_lines=200\n\011chat.lines = {}\n\011chat.scrollbar = ui_scrollbar.new(chat.x2-2,chat.y+11,chat.h-22,0,chat.shown_lines)\n\011chat.inputbox = ui_inputbox.new(x,chat.y2-10,w,10)\n\011chat.minimize = ui_button.new(chat.x2-15,chat.y,15,10,function() chat.moving=false chat.inputbox:setfocus(false) L.chatHidden=true TPTMP.chatHidden=true end,\">>\")\n\011chat:drawadd(function(self)\n\011\011if self.w > 175 and jacobsmod then\n\011\011\011gfx.drawText(self.x+self.w/2-tpt.textwidth(\"TPT Multiplayer, by cracker64\")/2,self.y+2,\"TPT Multiplayer, by cracker64\")\n\011\011elseif self.w > 100 then\n\011\011\011gfx.drawText(self.x+self.w/2-tpt.textwidth(\"TPT Multiplayer\")/2,self.y+2,\"TPT Multiplayer\")\n\011\011end\n\011\011gfx.drawLine(self.x+1,self.y+10,self.x2-1,self.y+10,120,120,120)\n\011\011self.scrollbar:draw()\n\011\011local count=0\n\011\011for i,line in ipairs(self.lines) do\n\011\011\011if i>self.scrollbar.pos and i<= self.scrollbar.pos+self.shown_lines then\n\011\011\011\011line:draw(self.x+3,self.y+12+(count*10))\n\011\011\011\011count = count+1\n\011\011\011end\n\011\011end\n\011\011self.inputbox:draw()\n\011\011self.minimize:draw()\n\011end)\n\011chat:moveadd(function(self,x,y)\n\011\011for i,line in ipairs(self.lines) do\n\011\011\011line:onmove(x,y)\n\011\011end\n\011\011self.scrollbar:onmove(x,y)\n\011\011self.inputbox:onmove(x,y)\n\011\011self.minimize:onmove(x,y)\n\011end)\n\011function chat:addline(line,r,g,b,noflash)\n\011\011if not line or line==\"\" then return end --No blank lines\n\011\011local linebreak,lastspace = 0,nil\n\011\011for i=0,#line do\n\011\011\011local width = tpt.textwidth(line:sub(linebreak,i+1))\n\011\011\011if width > self.max_width/2 and line:sub(i,i):match(\"[%s,_%.%-?!]\") then\n\011\011\011\011lastspace = i\n\011\011\011end\n\011\011\011if width > self.max_width or i==#line then\n\011\011\011\011local pos = (i==#line or not lastspace) and i or lastspace\n\011\011\011\011table.insert(self.lines,ui_text.new(line:sub(linebreak,pos),self.x,0,r,g,b))\n\011\011\011\011linebreak = pos+1\n\011\011\011\011lastspace = nil\n\011\011\011end\n\011\011end\n\011\011while #self.lines>self.max_lines do table.remove(self.lines,1) end\n\011\011self.scrollbar:update(#self.lines,self.shown_lines,#self.lines-self.shown_lines)\n\011\011if L.chatHidden and not noflash then L.flashChat=true end\n\011end\n\011chat:addline(\"TPTMP v\"..versionstring..\": Type '/connect' to join server, or /list for a list of commands.\",200,200,200,true)\n\011function chat:mouseDown(mouseX, mouseY, button)\n\011\011if L.chatHidden then return false end\n\011\011self.minimize:mouseDown(mouseX, mouseY, button)\n\011\011\n\011\011local selectedLine = math.floor((mouseY - self.y) / 10)\n\011\011-- Mouse outside chat window, defocus it\n\011\011if mouseX < self.x or mouseX > self.x2 or mouseY < self.y or mouseY > self.y2 then\n\011\011\011self.inputbox:setfocus(false)\n\011\011\011return false\n\011\011end\n\n\011\011-- header was grabbed, enable window movement\n\011\011if selectedLine == 0 and mouseX < self.minimize.x then\n\011\011\011self.moving = true\n\011\011\011self.lastx = mx\n\011\011\011self.lasty = my\n\011\011\011self.relx = mouseX - self.x\n\011\011\011self.rely = mouseY - self.y\n\011\011\011return true\n\011\011-- Textbox clicked\n\011\011elseif selectedLine == self.shown_lines + 1 then\n\011\011\011self.inputbox:setfocus(true)\n\011\011\011return true\n\011\011end\n\n\011\011-- At this point we know chatbox is selected, ensure window is focused then block mouse events\n\011\011if not self.inputbox.focus then\n\011\011\011self.inputbox:setfocus(true)\n\011\011end\n\011\011return true\n\011end\n\011function chat:mouseMove(mouseX, mouseY, dX, dY)\n\011\011if self.moving then\n\011\011\011local newx, newy = self.x + dX, self.y + dY\n\011\011\011if newx < 0 then dX = dX - newx end\n\011\011\011if newy < 0 then dY = dY - newy end\n\011\011\011if (newx + self.w) >= sim.XRES then dX = dX - (newx + self.w - sim.XRES) end\n\011\011\011if (newy + self.h) >= sim.YRES then dY = dY - (newy + self.h - sim.YRES) end\n\n\011\011\011if dX < 0 and mouseX > self.relx + self.x then dX = 0 end\n\011\011\011if dX > 0 and mouseX < self.relx + self.x then dX = 0 end\n\011\011\011if dY < 0 and mouseY > self.rely + self.y then dY = 0 end\n\011\011\011if dY > 0 and mouseY < self.rely + self.y then dY = 0 end\n\011\011\011\n\011\011\011self:onmove(dX, dY)\n\011\011end\n\011\011self.minimize:mouseMove(mouseX, mouseY, dX, dY)\n\011end\n\011function chat:mouseUp(mouseX, mouseY, button, reason)\n\011\011self.minimize:mouseUp(mouseX, mouseY, button, reason)\n\011\011if self.moving then\n\011\011\011self.moving = false\n\011\011\011return true\n\011\011end\n\011end\n\011function chat:mouseWheel(mouseX, mouseY, wheel)\n\011\011self.scrollbar:mouseWheel(mouseX, mouseY, wheel)\n\011end\n\011--commands for chat window\n\011chatcommands = {\n\011connect = function(self,msg,args)\n\011\011if not issocket then self:addline(\"No luasockets found\") return end\n\011\011local newname = pcall(string.dump, get_name) and \"Gue\"..\"st\"..math[\"random\"](1111,9888) or get_name()\n\011\011local s,r = connectToServer(args[1],tonumber(args[2]), newname~=\"\" and newname or username)\n\011\011if not s then self:addline(r,255,50,50) end\n\011\011pressedKeys = nil\n\011end,\n\011send = function(self,msg,args)\n\011\011if tonumber(args[1]) and args[2] then\n\011\011local withNull=false\n\011\011if args[2]==\"true\" then withNull=true end\n\011\011msg = msg:sub(#args[1]+1+(withNull and #args[2]+2 or 0))\n\011\011conSend(tonumber(args[1]),msg,withNull)\n\011\011end\n\011end,\n\011quit = function(self,msg,args)\n\011\011disconnected(\"Disconnected\")\n\011end,\n\011disconnect = function(self,msg,args)\n\011\011disconnected(\"Disconnected\")\n\011end,\n\011join = function(self,msg,args)\n\011\011if args[1] then\n\011\011\011joinChannel(args[1])\n\011\011\011self:addline(\"joined channel \"..args[1],50,255,50)\n\011\011end\n\011end,\n\011sync = function(self,msg,args)\n\011\011if con.connected then L.sendScreen=true end --need to send 67 clear screen\n\011\011self:addline(\"Synced screen to server\",255,255,50)\n\011end,\n\011help = function(self,msg,args)\n\011\011if not args[1] then self:addline(\"/help <command>, type /list for a list of commands\") end\n\011\011if args[1] == \"connect\" then self:addline(\"(/connect [ip] [port]) -- connect to a TPT multiplayer server, or no args to connect to the default one\")\n\011\011--elseif args[1] == \"send\" then self:addline(\"(/send <something> <somethingelse>) -- send raw data to the server\") -- send a raw command\n\011\011elseif args[1] == \"quit\" or args[1] == \"disconnect\" then self:addline(\"(/quit, no arguments) -- quit the game\")\n\011\011elseif args[1] == \"join\" then self:addline(\"(/join <channel> -- joins a room on the server\")\n\011\011elseif args[1] == \"sync\" then self:addline(\"(/sync, no arguments) -- syncs your screen to everyone else in the room\")\n\011\011elseif args[1] == \"me\" then self:addline(\"(/me <message>) -- say something in 3rd person\") -- send a raw command\n\011\011elseif args[1] == \"kick\" then self:addline(\"(/kick <nick> <reason>) -- kick a user, only works if you have been in a channel the longest\")\n\011\011elseif args[1] == \"size\" then self:addline(\"(/size <width> <height>) -- sets the size of the chat window\")\n\011\011end\n\011end,\n\011list = function(self,msg,args)\n\011\011local list = \"\"\n\011\011for name in pairs(chatcommands) do\n\011\011\011list=list..name..\", \"\n\011\011end\n\011\011self:addline(\"Commands: \"..list:sub(1,#list-2))\n\011end,\n\011me = function(self, msg, args)\n\011\011if not con.connected then return end\n\011\011self:addline(\"* \" .. username .. \" \".. table.concat(args, \" \"),200,200,200)\n\011\011conSend(20,table.concat(args, \" \"),true)\n\011end,\n\011kick = function(self, msg, args)\n\011\011if not con.connected then return end\n\011\011if not args[1] then self:addline(\"Need a nick! '/kick <nick> [reason]'\") return end\n\011\011conSend(21, args[1]..\"\\0\"..table.concat(args, \" \", 2),true)\n\011end,\n\011size = function(self, msg, args)\n\011\011if args[2] then\n\011\011\011local w, h = tonumber(args[1]), tonumber(args[2])\n\011\011\011if w < 75 or h < 50 then self:addline(\"size too small\") return\n\011\011\011elseif w > sim.XRES-100 or h > sim.YRES-100 then self:addline(\"size too large\") return\n\011\011\011end\n\011\011\011chatwindow = ui_chatbox.new(100,100,w,h)\n\011\011\011chatwindow:setbackground(10,10,10,235) chatwindow.drawbackground=true\n\011\011\011if using_manager then\n\011\011\011\011MANAGER.savesetting(\"tptmp\", \"width\", w)\n\011\011\011\011MANAGER.savesetting(\"tptmp\", \"height\", h)\n\011\011\011end\n\011\011end\n\011end\n\011}\n\011function chat:keypress(key, scan, rep, shift, ctrl, alt)\n\011\011if L.chatHidden then return nil end\n\011\011local text = self.inputbox:keypress(key, scan, rep, shift, ctrl, alt)\n\011\011if text and text~=\"\" then\n\011\011\011local cmd = text:match(\"^/([^%s]+)\")\n\011\011\011if cmd then\n\011\011\011\011local msg=text:sub(#cmd+3)\n\011\011\011\011local args = getArgs(msg)\n\011\011\011\011if chatcommands[cmd] then\n\011\011\011\011\011chatcommands[cmd](self,msg,args)\n\011\011\011\011\011--self:addline(\"Executed \"..cmd..\" \"..rest)\n\011\011\011\011\011return\n\011\011\011\011end\n\011\011\011end\n\011\011\011--normal chat\n\011\011\011if con.connected then\n\011\011\011\011conSend(19,text,true)\n\011\011\011\011self:addline(username .. \": \".. text,200,200,200)\n\011\011\011else\n\011\011\011\011self:addline(\"Not connected to server!\",255,50,50)\n\011\011\011end\n\011\011end\n\011\011if self.inputbox.focus then\n\011\011\011return true\n\011\011end\n\011end\n\011function chat:textinput(text)\n\011\011if L.chatHidden then return end\n\011\011self.inputbox:textinput(text)\n\011end\n\011return chat\nend\n}\nlocal fadeText = {}\n--A little text that fades away, (align text (left/center/right)?)\nlocal function newFadeText(text,frames,x,y,r,g,b,noremove)\n\011local t = {ticks=frames,max=frames,text=text,x=x,y=y,r=r,g=g,b=b,keep=noremove}\n\011t.reset = function(self,text) self.ticks=self.max if text then self.text=text end end\n\011table.insert(fadeText,t)\n\011return t\nend\n--Some text locations for repeated usage\nlocal infoText = newFadeText(\"\",150,245,370,255,255,255,true)\nlocal cmodeText = newFadeText(\"\",120,250,180,255,255,255,true)\n\nlocal function getypos()\n\011local ypos = 136\n\011if jacobsmod and tpt.oldmenu and tpt.oldmenu()==1 then\n\011\011ypos = 392\n\011elseif tpt.num_menus then\n\011\011ypos = 392-16*tpt.num_menus()-(not jacobsmod and 16 or 0)\n\011end\n\011if using_manager then ypos = ypos - 17 end\n\011return ypos\nend\nlocal jacobsmod_old_menu_check = false\nlocal showbutton = ui_button.new(613,getypos(),14,14,function() if using_manager and not MANAGER.hidden then _print(\"minimize the manager before opening TPTMP\") return end if not hooks_enabled then TPTMP.enableMultiplayer() end L.chatHidden=false TPTMP.chatHidden=false L.flashChat=false end,\"MP\")\nlocal flashCount=0\nshowbutton.drawbox = true showbutton:drawadd(function(self) if L.flashChat then self.almostselected=true flashCount=flashCount+1 if flashCount%25==0 then self.invert=not self.invert end end end)\nif using_manager then\n\011local loadsettings = function() chatwindow = ui_chatbox.new(100, 100, tonumber(MANAGER.getsetting(\"tptmp\", \"width\")), tonumber(MANAGER.getsetting(\"tptmp\", \"height\"))) end\n\011if not pcall(loadsettings) then chatwindow = ui_chatbox.new(100, 100, 225, 150) end\nelse\n\011chatwindow = ui_chatbox.new(100, 100, 225, 150)\nend\nchatwindow:setbackground(10,10,10,235) chatwindow.drawbackground=true\n\nlocal eleNameTable = {\n[\"DEFAULT_PT_LIFE_GOL\"] = 256,[\"DEFAULT_PT_LIFE_HLIF\"] = 257,[\"DEFAULT_PT_LIFE_ASIM\"] = 258,[\"DEFAULT_PT_LIFE_2x2\"] = 259,[\"DEFAULT_PT_LIFE_DANI\"] = 260,\n[\"DEFAULT_PT_LIFE_AMOE\"] = 261,[\"DEFAULT_PT_LIFE_MOVE\"] = 262,[\"DEFAULT_PT_LIFE_PGOL\"] = 263,[\"DEFAULT_PT_LIFE_DMOE\"] = 264,[\"DEFAULT_PT_LIFE_34\"] = 265,\n[\"DEFAULT_PT_LIFE_LLIF\"] = 276,[\"DEFAULT_PT_LIFE_STAN\"] = 267,[\"DEFAULT_PT_LIFE_SEED\"] = 268,[\"DEFAULT_PT_LIFE_MAZE\"] = 269,[\"DEFAULT_PT_LIFE_COAG\"] = 270,\n[\"DEFAULT_PT_LIFE_WALL\"] = 271,[\"DEFAULT_PT_LIFE_GNAR\"] = 272,[\"DEFAULT_PT_LIFE_REPL\"] = 273,[\"DEFAULT_PT_LIFE_MYST\"] = 274,[\"DEFAULT_PT_LIFE_LOTE\"] = 275,\n[\"DEFAULT_PT_LIFE_FRG2\"] = 276,[\"DEFAULT_PT_LIFE_STAR\"] = 277,[\"DEFAULT_PT_LIFE_FROG\"] = 278,[\"DEFAULT_PT_LIFE_BRAN\"] = 279,\n--walls\n[\"DEFAULT_WL_ERASE\"] = 280,[\"DEFAULT_WL_CNDTW\"] = 281,[\"DEFAULT_WL_EWALL\"] = 282,[\"DEFAULT_WL_DTECT\"] = 283,[\"DEFAULT_WL_STRM\"] = 284,\n[\"DEFAULT_WL_FAN\"] = 285,[\"DEFAULT_WL_LIQD\"] = 286,[\"DEFAULT_WL_ABSRB\"] = 287,[\"DEFAULT_WL_WALL\"] = 288,[\"DEFAULT_WL_AIR\"] = 289,[\"DEFAULT_WL_POWDR\"] = 290,\n[\"DEFAULT_WL_CNDTR\"] = 291,[\"DEFAULT_WL_EHOLE\"] = 292,[\"DEFAULT_WL_GAS\"] = 293,[\"DEFAULT_WL_GRVTY\"] = 294,[\"DEFAULT_WL_ENRGY\"] = 295,\n[\"DEFAULT_WL_NOAIR\"] = 296,[\"DEFAULT_WL_ERASEA\"] = 297,[\"DEFAULT_WL_STASIS\"] = 298,\n--special tools\n[\"DEFAULT_UI_SAMPLE\"] = 299,[\"DEFAULT_UI_SIGN\"] = 300,[\"DEFAULT_UI_PROPERTY\"] = 301,[\"DEFAULT_UI_WIND\"] = 302,\n--tools\n[\"DEFAULT_TOOL_HEAT\"] = 303,[\"DEFAULT_TOOL_COOL\"] = 304,[\"DEFAULT_TOOL_AIR\"] = 305,[\"DEFAULT_TOOL_VAC\"] = 306,[\"DEFAULT_TOOL_PGRV\"] = 307,[\"DEFAULT_TOOL_NGRV\"] = 308, [\"DEFAULT_TOOL_MIX\"] = 309,\n--decoration tools\n[\"DEFAULT_DECOR_SET\"] = 310,[\"DEFAULT_DECOR_CLR\"] = 311,[\"DEFAULT_DECOR_ADD\"] = 312,[\"DEFAULT_DECOR_SUB\"] = 313,[\"DEFAULT_DECOR_MUL\"] = 314,[\"DEFAULT_DECOR_DIV\"] = 315,[\"DEFAULT_DECOR_SMDG\"] = 316,\n[\"DEFAULT_DECOR_LIGH\"] = 317, [\"DEFAULT_DECOR_DARK\"] = 318\n}\nlocal gravList= {[0]=\"Vertical\",[1]=\"Off\",[2]=\"Radial\"}\nlocal airList= {[0]=\"On\",[1]=\"Pressure Off\",[2]=\"Velocity Off\",[3]=\"Off\",[4]=\"No Update\"}\nlocal noFlood = {[15]=true,[55]=true,[87]=true,[128]=true,[158]=true}\nlocal noShape = {[55]=true,[87]=true,[128]=true,[158]=true}\nlocal createOverride = {\n\011[55] = function(rx,ry,c) return 0,0,c end,\n\011[87] = function(rx,ry,c) local tmp=rx+ry if tmp>55 then tmp=55 end return 0,0,c+bit.lshift(tmp,8) end,\n\011[88] = function(rx,ry,c) local tmp=rx*4+ry*4+7 if tmp>300 then tmp=300 end return rx,ry,c+bit.lshift(tmp,8) end,\n\011[128] = function(rx,ry,c) return 0,0,c end,\n\011[158] = function(rx,ry,c) return 0,0,c end}\nlocal golStart,golEnd=256,279\nlocal wallStart,wallEnd=280,298\nlocal toolStart,toolEnd=303,309\nlocal decoStart,decoEnd=310,318\n\n--Functions that do stuff in powdertoy\nlocal function createPartsAny(x,y,rx,ry,c,brush,user)\n\011if c>=wallStart then\n\011\011if c<= wallEnd then\n\011\011\011if c == 284 then rx,ry = 0,0 end\n\011\011\011sim.createWalls(x,y,rx,ry,c-wallStart,brush)\n\011\011elseif c<=toolEnd then\n\011\011\011if c>=toolStart then sim.toolBrush(x,y,rx,ry,c-toolStart,brush) end\n\011\011elseif c<= decoEnd then\n\011\011\011sim.decoBrush(x,y,rx,ry,user.dcolour[2],user.dcolour[3],user.dcolour[4],user.dcolour[1],c-decoStart,brush)\n\011\011end\n\011\011return\n\011elseif c>=golStart then\n\011\011c = 78+(c-golStart)*bit.lshift(1, sim.PMAPBITS)\n\011end\n\011if createOverride[c] then\n\011\011rx,ry,c = createOverride[c](rx,ry,c)\n\011end\n\011sim.createParts(x,y,rx,ry,c,brush,user.replacemode)\nend\nlocal function createLineAny(x1,y1,x2,y2,rx,ry,c,brush,user)\n\011if noShape[c] then return end\n\011if jacobsmod and c == tpt.element(\"ball\") and not user.shift then return end\n\011if c>=wallStart then\n\011\011if c<= wallEnd then\n\011\011\011if c == 284 then rx,ry = 0,0 end\n\011\011\011sim.createWallLine(x1,y1,x2,y2,rx,ry,c-wallStart,brush)\n\011\011elseif c<=toolEnd then\n\011\011\011if c>=toolStart then local str=1.0 if user.drawtype==4 then if user.shift then str=10.0 elseif user.alt then str=0.1 end end sim.toolLine(x1,y1,x2,y2,rx,ry,c-toolStart,brush,str) end\n\011\011elseif c<= decoEnd then\n\011\011\011sim.decoLine(x1,y1,x2,y2,rx,ry,user.dcolour[2],user.dcolour[3],user.dcolour[4],user.dcolour[1],c-decoStart,brush)\n\011\011end\n\011\011return\n\011elseif c>=golStart then\n\011\011c = 78+(c-golStart)*bit.lshift(1, sim.PMAPBITS)\n\011end\n\011if createOverride[c] then\n\011\011rx,ry,c = createOverride[c](rx,ry,c)\n\011end\n\011sim.createLine(x1,y1,x2,y2,rx,ry,c,brush,user.replacemode)\nend\nlocal function createBoxAny(x1,y1,x2,y2,c,user)\n\011if noShape[c] then return end\n\011if c>=wallStart then\n\011\011if c<= wallEnd then\n\011\011\011sim.createWallBox(x1,y1,x2,y2,c-wallStart)\n\011\011elseif c<=toolEnd then\n\011\011\011if c>=toolStart then sim.toolBox(x1,y1,x2,y2,c-toolStart) end\n\011\011elseif c<= decoEnd then\n\011\011\011sim.decoBox(x1,y1,x2,y2,user.dcolour[2],user.dcolour[3],user.dcolour[4],user.dcolour[1],c-decoStart)\n\011\011end\n\011\011return\n\011elseif c>=golStart then\n\011\011c = 78+(c-golStart)*bit.lshift(1, sim.PMAPBITS)\n\011end\n\011if createOverride[c] then\n\011\011_,_,c = createOverride[c](user.brushx,user.brushy,c)\n\011end\n\011sim.createBox(x1,y1,x2,y2,c,user and user.replacemode)\nend\nlocal function floodAny(x,y,c,cm,bm,user)\n\011if noFlood[c] then return end\n\011if c>=wallStart then\n\011\011if c<= wallEnd then\n\011\011\011sim.floodWalls(x,y,c-wallStart,bm)\n\011\011end\n\011\011--other tools shouldn't flood\n\011\011return\n\011elseif c>=golStart then --GoL adjust\n\011\011c = 78+(c-golStart)*bit.lshift(1, sim.PMAPBITS)\n\011end\n\011if createOverride[c] then\n\011\011_,_,c = createOverride[c](user.brushx,user.brushy,c)\n\011end\n\011sim.floodParts(x,y,c,cm,user.replacemode)\nend\nlocal function lineSnapCoords(x1,y1,x2,y2)\n\011local nx,ny\n\011local snapAngle = math.floor(math.atan2(y2-y1, x2-x1)/(math.pi*0.25)+0.5)*math.pi*0.25;\n\011local lineMag = math.sqrt(math.pow(x2-x1,2)+math.pow(y2-y1,2));\n\011nx = math.floor(lineMag*math.cos(snapAngle)+x1+0.5);\n\011ny = math.floor(lineMag*math.sin(snapAngle)+y1+0.5);\n\011return nx,ny\nend\n\nlocal function rectSnapCoords(x1,y1,x2,y2)\n\011local nx,ny\n\011local snapAngle = math.floor((math.atan2(y2-y1, x2-x1)+math.pi*0.25)/(math.pi*0.5)+0.5)*math.pi*0.5 - math.pi*0.25;\n\011local lineMag = math.sqrt(math.pow(x2-x1,2)+math.pow(y2-y1,2));\n\011nx = math.floor(lineMag*math.cos(snapAngle)+x1+0.5);\n\011ny = math.floor(lineMag*math.sin(snapAngle)+y1+0.5);\n\011return nx,ny\nend\nlocal function wallSnapCoords(x, y)\n\011return math.floor(x / 4) * 4, math.floor(y / 4) * 4\nend\nlocal renModes = {[0xff00f270]=1,[-16715152]=1,[0x0400f381]=2,[0xf382]=4,[0xf388]=8,[0xf384]=16,[0xfff380]=32,[1]=0xff00f270,[2]=0x0400f381,[4]=0xf382,[8]=0xf388,[16]=0xf384,[32]=0xfff380}\nlocal function getViewModes()\n\011local t={0,0,0}\n\011for k,v in pairs(ren.displayModes()) do\n\011\011t[1] = t[1]+v\n\011end\n\011for k,v in pairs(ren.renderModes()) do\n\011\011t[2] = t[2]+(renModes[v] or 0)\n\011end\n\011t[3] = ren.colorMode()\n\011return t\nend\n\n--clicky click\nlocal function playerMouseClick(id,btn,ev)\n\011local user = con.members[id]\n\011local createE, checkBut\n\n\011--_print(tostring(btn)..tostring(ev))\n\011if ev==0 then return end\n\011-- Mouse up event, TPT will \"draw\" whatever element was last clicked, even if we are releasing a different button\n\011-- This covers the case where we start drawing a line with rmb, switch to lmb, but then release rmb. The lmb element is drawn\n\011if ev == 2 then\n\011\011if user.lbtn then\n\011\011\011createE,checkBut=user.selectedl,user.lbtn\n\011\011elseif user.abtn then\n\011\011\011createE,checkBut=user.selecteda,user.abtn\n\011\011elseif user.rbtn then\n\011\011\011createE,checkBut=user.selectedr,user.rbtn\n\011\011else\n\011\011\011return\n\011\011end\n\011else\n\011\011if btn==1 then\n\011\011\011user.rbtn,user.abtn = false,false\n\011\011\011createE,checkBut=user.selectedl,user.lbtn\n\011\011elseif btn==2 then\n\011\011\011user.rbtn,user.lbtn = false,false\n\011\011\011createE,checkBut=user.selecteda,user.abtn\n\011\011elseif btn==3 then\n\011\011\011user.lbtn,user.abtn = false,false\n\011\011\011createE,checkBut=user.selectedr,user.rbtn\n\011\011else\n\011\011\011return\n\011\011end\n\011end\n\n\011--if user.mousex>=sim.XRES or user.mousey>=sim.YRES then user.drawtype=false return end\n\n\011if ev==1 then\n\011\011if user.mousex >= 0 and user.mousey >= 0 and user.mousex < sim.XRES and user.mousey < sim.YRES then\n\011\011\011user.pmx,user.pmy = user.mousex,user.mousey\n\011\011\011--left box\n\011\011\011if user.ctrl and not user.shift then user.drawtype = 2 return end\n\011\011\011--left line\n\011\011\011if user.shift and not user.ctrl then user.drawtype = 1 return end\n\011\011\011--floodfill\n\011\011\011if user.ctrl and user.shift then floodAny(user.mousex,user.mousey,createE,-1,-1,user) user.drawtype = 3 return end\n\011\011\011--an alt click\n\011\011\011if user.alt then return end\n\011\011\011user.drawtype=4 --normal hold\n\011\011\011createPartsAny(user.mousex,user.mousey,user.brushx,user.brushy,createE,user.brush,user)\n\011\011end\n\011elseif ev==2 and checkBut and user.drawtype then\n\011\011local releaseX, releaseY = user.mousex, user.mousey\n\011\011\n\011\011if user.drawtype==2 then\n\011\011\011if user.alt then user.mousex,user.mousey = rectSnapCoords(user.pmx,user.pmy,releaseX,releaseY) end\n\011\011\011createBoxAny(releaseX,releaseY,user.pmx,user.pmy,createE,user)\n\011\011elseif user.drawtype ~= 3 then\n\011\011\011if user.alt then user.mousex,user.mousey = lineSnapCoords(user.pmx,user.pmy,user.mousex,user.mousey) end\n\011\011\011createLineAny(releaseX,releaseY,user.pmx,user.pmy,user.brushx,user.brushy,createE,user.brush,user)\n\011\011end\n\011\011user.drawtype=false\n\011\011user.pmx,user.pmy = user.mousex,user.mousey\n\011end\nend\n--To draw continued lines\nlocal function playerMouseMove(id)\n\011local user = con.members[id]\n\011local createE, checkBut\n\011if user.lbtn then\n\011\011createE,checkBut=user.selectedl,user.lbtn\n\011elseif user.rbtn then\n\011\011createE,checkBut=user.selectedr,user.rbtn\n\011elseif user.abtn then\n\011\011createE,checkBut=user.selecteda,user.abtn\n\011else return end\n\011if user.drawtype~=4 then if user.drawtype==3 then floodAny(user.mousex,user.mousey,createE,-1,-1,user) end return end\n\011\n\011if user.mousex>=sim.XRES then user.mousex=sim.XRES-1 end\n\011if user.mousey>=sim.YRES then user.mousey=sim.YRES-1 end\n\011createLineAny(user.mousex,user.mousey,user.pmx,user.pmy,user.brushx,user.brushy,createE,user.brush,user)\n\011user.pmx,user.pmy = user.mousex,user.mousey\nend\nlocal function loadStamp(size,x,y,reset)\n\011con.socket:settimeout(10)\n\011local s = con.socket:receive(size)\n\011con.socket:settimeout(0)\n\011if s then\n\011\011local f = io.open(\".tmp.stm\",\"wb\")\n\011\011f:write(s)\n\011\011f:close()\n\011\011if reset then sim.clearSim() end\n\011\011if not sim.loadStamp(\".tmp.stm\",x,y) then\n\011\011\011infoText:reset(\"Error loading stamp\")\n\011\011end\n\011\011os.remove\".tmp.stm\"\n\011else\n\011\011infoText:reset(\"Error loading empty stamp\")\n\011end\nend\nlocal function saveStamp(x, y, w, h)\n\011local stampName = sim.saveStamp(x, y, w, h) or \"errorsavingstamp\"\n\011local fullName = \"stamps/\"..stampName..\".stm\"\n\011return stampName, fullName\nend\nlocal function deleteStamp(name)\n\011if sim.deleteStamp then\n\011\011sim.deleteStamp(name)\n\011else\n\011\011os.remove(\"stamps/\"..name..\".stm\")\n\011end\nend\n\nlocal dataCmds = {\n\011[16] = function()\n\011--room members\n\011\011con.members = {}\n\011\011local amount = cByte()\n\011\011local peeps = {}\n\011\011for i=1,amount do\n\011\011\011local id = cByte()\n\011\011\011con.members[id]={name=conGetNull(),mousex=0,mousey=0,brushx=4,brushy=4,brush=0,selectedl=1,selectedr=0,selecteda=296,replacemode=0,dcolour={0,0,0,0},lbtn=false,abtn=false,rbtn=false,ctrl=false,shift=false,alt=false}\n\011\011\011local name = con.members[id].name\n\011\011\011table.insert(peeps,name)\n\011\011end\n\011\011chatwindow:addline(\"Online: \"..table.concat(peeps,\" \"),255,255,50)\n\011end,\n\011[17]= function()\n\011\011local id = cByte()\n\011\011con.members[id] ={name=conGetNull(),mousex=0,mousey=0,brushx=4,brushy=4,brush=0,selectedl=1,selectedr=0,selecteda=296,replacemode=0,dcolour={0,0,0,0},lbtn=false,abtn=false,rbtn=false,ctrl=false,shift=false,alt=false}\n\011\011chatwindow:addline(con.members[id].name..\" has joined\",100,255,100)\n\011end,\n\011[18] = function()\n\011\011local id = cByte()\n\011\011chatwindow:addline(con.members[id].name..\" has left\",255,255,100)\n\011\011con.members[id]=nil\n\011end,\n\011[19] = function()\n\011\011chatwindow:addline(con.members[cByte()].name .. \": \" .. conGetNull())\n\011end,\n\011[20] = function()\n\011\011chatwindow:addline(\"* \"..con.members[cByte()].name .. \" \" .. conGetNull())\n\011end,\n\011[22] = function()\n\011\011chatwindow:addline(\"[SERVER] \"..conGetNull(), cByte(), cByte(), cByte())\n\011end,\n\011--Mouse Position\n\011[32] = function()\n\011\011local id = cByte()\n\011\011local b1,b2,b3=cByte(),cByte(),cByte()\n\011\011con.members[id].mousex,con.members[id].mousey=((b1*16)+math.floor(b2/16)),((b2%16)*256)+b3\n\011\011playerMouseMove(id)\n\011end,\n\011--Mouse Click\n\011[33] = function()\n\011\011local id = cByte()\n\011\011local d=cByte()\n\011\011local btn,ev=math.floor(d/16),d%16\n\011\011-- Fake mouseup due to either blur or zoom window\n\011\011if btn == 0 then\n\011\011\011local user = con.members[id]\n\011\011\011user.lbtn, user.rbtn, user.abtn, user.drawtype = nil, nil, nil, nil\n\011\011\011return\n\011\011end\n\011\011playerMouseClick(id,btn,ev)\n\011\011if ev==0 then return end\n\011\011if ev==2 then ev = nil end\n\011\011if btn==1 then\n\011\011\011con.members[id].lbtn=ev\n\011\011elseif btn==2 then\n\011\011\011con.members[id].abtn=ev\n\011\011elseif btn==3 then\n\011\011\011con.members[id].rbtn=ev\n\011\011end\n\011end,\n\011--Brush size\n\011[34] = function()\n\011\011local id = cByte()\n\011\011con.members[id].brushx,con.members[id].brushy=cByte(),cByte()\n\011end,\n\011--Brush Shape change, no args\n\011[35] = function()\n\011\011local id = cByte()\n\011\011con.members[id].brush=(con.members[id].brush+1)%3\n\011end,\n\011--Modifier (mod and state)\n\011[36] = function()\n\011\011local id = cByte()\n\011\011local d=cByte()\n\011\011local mod,state=math.floor(d/16),d%16~=0\n\011\011if mod==0 then\n\011\011\011con.members[id].ctrl=state\n\011\011elseif mod==1 then\n\011\011\011con.members[id].shift=state\n\011\011elseif mod==2 then\n\011\011\011con.members[id].alt=state\n\011\011end\n\011end,\n\011--selected elements (2 bits button, 14-element)\n\011[37] = function()\n\011\011local id = cByte()\n\011\011local b1,b2=cByte(),cByte()\n\011\011local btn,el=math.floor(b1/64),(b1%64)*256+b2\n\011\011if btn==0 then\n\011\011\011con.members[id].selectedl=el\n\011\011elseif btn==1 then\n\011\011\011con.members[id].selecteda=el\n\011\011elseif btn==2 then\n\011\011\011con.members[id].selectedr=el\n\011\011elseif btn==3 then\n\011\011\011--sync replace mode element between all players since apparently you have to set tpt.selectedreplace to use replace mode ...\n\011\011\011tpt.selectedreplace = elem.property(el, \"Identifier\")\n\011\011end\n\011end,\n\011--replace mode / specific delete\n\011[38] = function()\n\011\011local id = cByte()\n\011\011local mod = cByte()\n\011\011con.members[id].replacemode = mod\n\011end,\n\011--cmode defaults (1 byte mode)\n\011[48] = function()\n\011\011local id = cByte()\n\011\011tpt.display_mode(cByte())\n\011\011cmodeText:reset(con.members[id].name..\" set:\")\n\011end,\n\011--pause set (1 byte state)\n\011[49] = function()\n\011\011local id = cByte()\n\011\011local p,str = cByte(),\"Pause\"\n\011\011tpt.set_pause(p)\n\011\011if p==0 then str=\"Unpause\" end\n\011\011infoText:reset(str..\" from \"..con.members[id].name)\n\011end,\n\011--step frame, no args\n\011[50] = function()\n\011\011local id = cByte()\n\011\011tpt.set_pause(0)\n\011\011L.pauseNextFrame=true\n\011end,\n\011--deco mode, (1 byte state)\n\011[51] = function()\n\011\011local id = cByte()\n\011\011tpt.decorations_enable(cByte())\n\011\011cmodeText:reset(con.members[id].name..\" set:\")\n\011end,\n\011--[[HUD mode, (1 byte state), deprecated\n\011[52] = function()\n\011\011local id = cByte()\n\011\011local hstate = cByte()\n\011\011tpt.hud(hstate)\n\011end,\n\011--]]\n\011--amb heat mode, (1 byte state)\n\011[53] = function()\n\011\011local id = cByte()\n\011\011tpt.ambient_heat(cByte())\n\011end,\n\011--newt_grav mode, (1 byte state)\n\011[54] = function()\n\011\011local id = cByte()\n\011\011tpt.newtonian_gravity(cByte())\n\011end,\n\n\011--[[\n\011--debug mode (1 byte state?) can't implement\n\011[55] = function()\n\011\011local id = cByte()\n\011\011--local dstate = cByte()\n\011\011tpt.setdebug()\n\011end,\n\011--]]\n\011--legacy heat mode, (1 byte state)\n\011[56] = function()\n\011\011local id = cByte()\n\011\011tpt.heat(cByte())\n\011end,\n\011--water equal, (1 byte state)\n\011[57] = function()\n\011\011local id = cByte()\n\011\011sim.waterEqualisation(cByte())\n\011end,\n\n\011--grav mode, (1 byte state)\n\011[58] = function()\n\011\011local id = cByte()\n\011\011local mode = cByte()\n\011\011sim.gravityMode(mode)\n\011\011cmodeText:reset(con.members[id].name..\" set: Gravity: \"..gravList[mode])\n\011end,\n\011--air mode, (1 byte state)\n\011[59] = function()\n\011\011local id = cByte()\n\011\011local mode=cByte()\n\011\011sim.airMode(mode)\n\011\011cmodeText:reset(con.members[id].name..\" set: Air: \"..airList[mode])\n\011end,\n\n\011--clear sparks (no args)\n\011[60] = function()\n\011\011local id = cByte()\n\011\011tpt.reset_spark()\n\011end,\n\011--clear pressure/vel (no args)\n\011[61] = function()\n\011\011local id = cByte()\n\011\011tpt.reset_velocity()\n\011\011tpt.set_pressure()\n\011end,\n\011--invert pressure (no args)\n\011[62] = function()\n\011\011local id = cByte()\n\011\011for x=0,152 do\n\011\011\011for y=0,95 do\n\011\011\011\011sim.pressure(x,y,-sim.pressure(x,y))\n\011\011\011end\n\011\011end\n\011end,\n\011--Clearsim button (no args)\n\011[63] = function()\n\011\011local id = cByte()\n\011\011sim.clearSim()\n\011\011L.lastSave=nil\n\011\011infoText:reset(con.members[id].name..\" cleared the screen\")\n\011end,\n\011--Full graphics view mode (for manual changes in display menu) (3 bytes)\n\011[64] = function()\n\011\011local id = cByte()\n\011\011local disM,renM,colM = cByte(),cByte(),cByte()\n\011\011ren.displayModes({disM})\n\011\011local t,i={},1\n\011\011while i<=32 do\n\011\011\011if bit.band(renM,i)>0 then table.insert(t,renModes[i]) end\n\011\011\011i=i*2\n\011\011end\n\011\011ren.renderModes(t)\n\011\011ren.colorMode(colM)\n\011end,\n\011--Selected deco colour (4 bytes)\n\011[65] = function()\n\011\011local id = cByte()\n\011\011con.members[id].dcolour = {cByte(),cByte(),cByte(),cByte()}\n\011end,\n\011--Recieve a stamp, with location (6 bytes location(3),size(3))\n\011[66] = function()\n\011\011local id = cByte()\n\011\011local b1,b2,b3=cByte(),cByte(),cByte()\n\011\011local x,y =((b1*16)+math.floor(b2/16)),((b2%16)*256)+b3\n\011\011local d = cByte()*65536+cByte()*256+cByte()\n\011\011loadStamp(d,x,y,false)\n\011\011infoText:reset(\"Stamp from \"..con.members[id].name)\n\011end,\n\011--Clear an area, helper for cut (6 bytes, start(3), end(3))\n\011[67] = function()\n\011\011local id = cByte()\n\011\011local b1,b2,b3,b4,b5,b6=cByte(),cByte(),cByte(),cByte(),cByte(),cByte()\n\011\011local x1,y1 =((b1*16)+math.floor(b2/16)),((b2%16)*256)+b3\n\011\011local x2,y2 =((b4*16)+math.floor(b5/16)),((b5%16)*256)+b6\n\011\011sim.clearRect(x1,y1,x2-x1+1,y2-y1+1)\n\011end,\n\011--Edge mode (1 byte state)\n\011[68] = function()\n\011\011local id = cByte()\n\011\011sim.edgeMode(cByte())\n\011end,\n\011--Load a save ID (3 bytes ID)\n\011[69] = function()\n\011\011local id = cByte()\n\011\011local saveID = cByte()*65536+cByte()*256+cByte()\n\011\011L.lastSave=saveID\n\011\011sim.loadSave(saveID,1)\n\011end,\n\011--Reload sim(from a stamp right now, no args)\n\011[70] = function()\n\011\011local id = cByte()\n\011\011sim.reloadSave()\n\011\011infoText:reset(con.members[id].name..\" reloaded the save\")\n\011end,\n\011--A request to sync a player, from server, send screen, and various settings\n\011[128] = function()\n\011\011local id = cByte()\n\011\011conSend(130,string.char(id,49,tpt.set_pause()))\n\011\011local stampName,fullName = saveStamp(0,0,sim.XRES-1,sim.YRES-1)\n\011\011local f = assert(io.open(fullName,\"rb\"))\n\011\011local s = f:read\"*a\"\n\011\011f:close()\n\011\011deleteStamp(stampName)\n\011\011local d = #s\n\011\011conSend(128,string.char(id,math.floor(d/65536),math.floor(d/256)%256,d%256)..s)\n\011\011conSend(130,string.char(id,53,tpt.ambient_heat()))\n\011\011conSend(130,string.char(id,54,tpt.newtonian_gravity()))\n\011\011conSend(130,string.char(id,56,tpt.heat()))\n\011\011conSend(130,string.char(id,57,sim.waterEqualisation()))\n\011\011conSend(130,string.char(id,58,sim.gravityMode()))\n\011\011conSend(130,string.char(id,59,sim.airMode()))\n\011\011conSend(130,string.char(id,68,sim.edgeMode()))\n\011\011conSend(64,string.char(unpack(getViewModes())))\n\011\011conSend(34,string.char(tpt.brushx,tpt.brushy))\n\011end,\n\011--Recieve sync stamp\n\011[129] = function()\n\011\011local d = cByte()*65536+cByte()*256+cByte()\n\011\011loadStamp(d,0,0,true)\n\011end,\n}\n\nlocal function connectThink()\n\011if not con.connected then return end\n\011if not con.socket then disconnected() return end\n\011--read all messages\n\011while 1 do\n\011\011local s,r = con.socket:receive(1)\n\011\011if s then\n\011\011\011local cmd = string.byte(s)\n\011\011\011--_print(\"GOT \"..tostring(cmd))\n\011\011\011if dataCmds[cmd] then dataCmds[cmd]() else _print(\"TPTMP: Unknown protocol \"..tostring(cmd),255,20,20) end\n\011\011else\n\011\011\011if r ~= \"timeout\" then disconnected() end\n\011\011\011break\n\011\011end\n\011end\n\n\011--ping every minute\n\011if os.time()>con.pingTime then conSend(2) con.pingTime=os.time()+60 end\nend\n--Track if we have STKM2 out, for WASD key changes\nelements.property(128,\"Update\",function() L.stick2=true end)\n\nlocal function drawStuff()\n\011if con.members then\n\011\011for i,user in pairs(con.members) do\n\011\011\011local x,y = user.mousex,user.mousey\n\011\011\011local brx,bry=user.brushx,user.brushy\n\011\011\011local brush,drawBrush=user.brush,true\n\011\011\011gfx.drawText(x,y,(\"%s %dx%d\"):format(user.name,brx,bry),0,255,0,192)\n\n\011\011\011-- Draw player cursors\n\011\011\011if user.drawtype==1 then\n\011\011\011\011if user.alt then x,y = lineSnapCoords(user.pmx,user.pmy,x,y) end\n\011\011\011\011gfx.drawLine(user.pmx,user.pmy,x,y,0,255,0,128)\n\011\011\011elseif user.drawtype==2 then\n\011\011\011\011if user.alt then x,y = rectSnapCoords(user.pmx,user.pmy,x,y) end\n\011\011\011\011local tpmx,tpmy = user.pmx,user.pmy\n\011\011\011\011if tpmx>x then tpmx,x=x,tpmx end\n\011\011\011\011if tpmy>y then tpmy,y=y,tpmy end\n\011\011\011\011gfx.drawRect(tpmx,tpmy,x-tpmx+1,y-tpmy+1,0,255,0,128)\n\011\011\011\011drawBrush=false\n\011\011\011elseif user.drawtype==3 or (user.shift and user.ctrl) then\n\011\011\011\011gfx.drawLine(x,y,x+5,y,0,255,0,128)\n\011\011\011\011gfx.drawLine(x,y,x-5,y,0,255,0,128)\n\011\011\011\011gfx.drawLine(x,y,x,y+5,0,255,0,128)\n\011\011\011\011gfx.drawLine(x,y,x,y-5,0,255,0,128)\n\011\011\011\011drawBrush=false\n\011\011\011end\n\n\011\011\011if drawBrush then\n\011\011\011\011if user.selectedl >= wallStart and user.selectedl <= wallEnd then\n\011\011\011\011\011local blockX, blockY = wallSnapCoords(x, y)\n\011\011\011\011\011local blockRadX, blockRadY = wallSnapCoords(brx, bry)\n\011\011\011\011\011\n\011\011\011\011\011local x1, y1 = blockX - blockRadX, blockY - blockRadY\n\011\011\011\011\011local x2, y2 = blockX + blockRadX + 3, blockY + blockRadY + 3\n\011\011\011\011\011gfx.drawRect(x1, y1, x2 - x1, y2 - y1)\n\011\011\011\011elseif brush==0 then\n\011\011\011\011\011gfx.drawCircle(x,y,brx,bry,0,255,0,128)\n\011\011\011\011elseif brush==1 then\n\011\011\011\011\011gfx.drawRect(x-brx,y-bry,brx*2+1,bry*2+1,0,255,0,128)\n\011\011\011\011elseif brush==2 then\n\011\011\011\011\011gfx.drawLine(x-brx,y+bry,x,y-bry,0,255,0,128)\n\011\011\011\011\011gfx.drawLine(x-brx,y+bry,x+brx,y+bry,0,255,0,128)\n\011\011\011\011\011gfx.drawLine(x,y-bry,x+brx,y+bry,0,255,0,128)\n\011\011\011\011end\n\011\011\011end\n\011\011end\n\011end\n\011for k,v in pairs(fadeText) do\n\011\011if v.ticks > 0 then\n\011\011\011local a = math.floor(255*(v.ticks/v.max))\n\011\011\011gfx.drawText(v.x,v.y,v.text,v.r,v.g,v.b,a)\n\011\011\011v.ticks = v.ticks-1\n\011\011else if not v.keep then table.remove(fadeText,k) end\n\011\011end\n\011end\nend\n\nlocal function sendStuff()\n\011if not con.connected then return end\n\011if tpt.brushx > 255 then tpt.brushx = 255 end\n\011if tpt.brushy > 255 then tpt.brushy = 255 end\n\011local nbx,nby = tpt.brushx,tpt.brushy\n\011if L.brushx~=nbx or L.brushy~=nby then\n\011\011L.brushx,L.brushy = nbx,nby\n\011\011conSend(34,string.char(L.brushx,L.brushy))\n\011end\n\011--check selected elements\n\011local nsell,nsela,nselr,nselrep = elements[tpt.selectedl] or eleNameTable[tpt.selectedl],elements[tpt.selecteda] or eleNameTable[tpt.selecteda],elements[tpt.selectedr] or eleNameTable[tpt.selectedr],elements[tpt.selectedreplace] or eleNameTable[tpt.selectedreplace]\n\011if L.sell~=nsell then\n\011\011L.sell=nsell\n\011\011if nsell == nil then\n\011\011\011_print(\"Unsupported wall/tool \"..tpt.selectedl)\n\011\011else\n\011\011\011conSend(37,string.char(math.floor(L.sell/256),L.sell%256))\n\011\011end\n\011elseif L.sela~=nsela then\n\011\011L.sela=nsela\n\011\011if nsela == nil then\n\011\011\011_print(\"Unsupported wall/tool \"..tpt.selecteda)\n\011\011else\n\011\011\011conSend(37,string.char(math.floor(64 + L.sela/256),L.sela%256))\n\011\011end\n\011elseif L.selr~=nselr then\n\011\011L.selr=nselr\n\011\011if nselr == nil then\n\011\011\011_print(\"Unsupported wall/tool \"..tpt.selectedr)\n\011\011else\n\011\011\011conSend(37,string.char(math.floor(128 + L.selr/256),L.selr%256))\n\011\011end\n\011elseif L.selrep~=nselrep then\n\011\011L.selrep=nselrep\n\011\011if nselrep == nil then\n\011\011\011_print(\"Unsupported wall/tool \"..tpt.selectedreplace)\n\011\011else\n\011\011\011conSend(37,string.char(math.floor(192 + L.selrep/256),L.selrep%256))\n\011\011end\n\011end\n\011local ncol = sim.decoColour()\n\011if L.dcolour~=ncol then\n\011\011L.dcolour=ncol\n\011\011conSend(65,string.char(math.floor(ncol/16777216),math.floor(ncol/65536)%256,math.floor(ncol/256)%256,ncol%256))\n\011end\n\n\011--Tell others to open this save ID, or send screen if opened local browser\n\011if L.browseMode==1 then\n\011\011--loaded online save\n\011\011local id=sim.getSaveID()\n\011\011if L.lastSave~=id then\n\011\011\011L.lastSave=id\n\011\011\011conSend(69,string.char(math.floor(id/65536),math.floor(id/256)%256,id%256))\n\011\011end\n\011\011L.browseMode=nil\n\011elseif L.browseMode==2 then\n\011\011--loaded local save (should probably clear sim first instead?)\n\011\011L.sendScreen=true\n\011\011L.browseMode=nil\n\011end\n\n\011--Send screen (or an area for known size) for stamps\n\011if jacobsmod and L.sendScreen == 2 then\n\011\011L.sendScreen = true\n\011elseif L.sendScreen then\n\011\011local x,y,w,h = 0,0,sim.XRES-1,sim.YRES-1\n\011\011if L.smoved then\n\011\011\011local stm\n\011\011\011if L.copying then stm=L.lastCopy else stm=L.lastStamp end\n\011\011\011if L.rotate then stm.w,stm.h=stm.h,stm.w end\n\011\011\011x,y,w,h = math.floor((L.mousex-stm.w/2)/4)*4,math.floor((L.mousey-stm.h/2)/4)*4,stm.w,stm.h\n\011\011\011L.smoved=false\n\011\011\011L.copying=false\n\011\011end\n\011\011L.sendScreen=false\n\011\011local stampName,fullName = saveStamp(x,y,w,h)\n\011\011local f = assert(io.open(fullName,\"rb\"))\n\011\011local s = f:read\"*a\"\n\011\011f:close()\n\011\011deleteStamp(stampName)\n\011\011local d = #s\n\011\011local b1,b2,b3 = math.floor(x/16),((x%16)*16)+math.floor(y/256),(y%256)\n\011\011conSend(67,string.char(math.floor(x/16),((x%16)*16)+math.floor(y/256),(y%256),math.floor((x+w)/16),(((x+w)%16)*16)+math.floor((y+h)/256),((y+h)%256)))\n\011\011conSend(66,string.char(b1,b2,b3,math.floor(d/65536),math.floor(d/256)%256,d%256)..s)\n\011\011conSend(49,string.char(tpt.set_pause()))\n\011end\n\n\011--Check if custom modes were changed\n\011if jacobsmod and L.checkRen == 2 then\n\011\011L.checkRen = true\n\011elseif L.checkRen then\n\011\011L.checkRen=false\n\011\011local t,send=getViewModes(),false\n\011\011for k,v in pairs(t) do\n\011\011\011if v~=L.pModes[k] then\n\011\011\011\011send=true break\n\011\011\011end\n\011\011end\n\011\011if send then conSend(64,string.char(t[1],t[2],t[3])) end\n\011end\n\n\011--Send option menu settings\n\011if L.checkOpt then\n\011\011L.checkOpt=false\n\011\011conSend(49,string.char(tpt.set_pause()))\n\011\011conSend(56,string.char(tpt.heat()))\n\011\011conSend(53,string.char(tpt.ambient_heat()))\n\011\011conSend(54,string.char(tpt.newtonian_gravity()))\n\011\011conSend(57,string.char(sim.waterEqualisation()))\n\011\011conSend(58,string.char(sim.gravityMode()))\n\011\011conSend(59,string.char(sim.airMode()))\n\011\011conSend(68,string.char(sim.edgeMode()))\n\011end\n\nend\nlocal function updatePlayers()\n\011if con.members then\n\011\011for k,v in pairs(con.members) do\n\011\011\011playerMouseMove(k)\n\011\011end\n\011end\n\011--Keep last frame of stick2\n\011L.lastStick2=L.stick2\n\011L.stick2=false\nend\n\nlocal pressedKeys\nlocal function step()\n\011if jacobsmod_old_menu_check then showbutton:onmove(0, getypos()-showbutton.y) end\n\011if not L.chatHidden then chatwindow:draw() else showbutton:draw() end\n\011if hooks_enabled then\n\011\011drawStuff()\n\011\011sendStuff()\n\011\011if L.pauseNextFrame then L.pauseNextFrame=false tpt.set_pause(1) end\n\011\011connectThink()\n\011\011updatePlayers()\n\011end\nend\n\n--some button locations that emulate tpt, return false will disable button\nlocal tpt_buttons = {\n\011[\"open\"] = {x1=1, y1=408, x2=17, y2=422, f=function() if not L.ctrl then L.browseMode=1 else L.browseMode=2 end L.lastSave=sim.getSaveID() end},\n\011[\"rload\"] = {x1=19, y1=408, x2=35, y2=422, f=function()\n\011\011if L.lastSave then\n\011\011\011if L.ctrl then\n\011\011\011\011infoText:reset(\"If you re-opened the save, please type /sync\")\n\011\011\011else\n\011\011\011\011conSend(70)\n\011\011\011\011infoText:reset(\"Sent sync\")\n\011\011\011end\n\011\011else\n\011\011\011--[[infoText:reset(\"Reloading local saves is not synced currently. Type /sync\")]]\n\011\011\011L.checkOpt = true\n\011\011\011L.sendScreen = true\n\011\011end\n\011end},\n\011[\"clear\"] = {x1=470, y1=408, x2=486, y2=422, f=function() conSend(63) L.lastSave=nil end},\n\011[\"opts\"] = {x1=581, y1=408, x2=595, y2=422, f=function() L.checkOpt=true end},\n\011[\"disp\"] = {x1=597, y1=408, x2=611, y2=422, f=function() L.checkRen=true L.pModes=getViewModes() end},\n\011[\"pause\"] = {x1=gfx.WIDTH-16, y1=408, x2=gfx.WIDTH-2, y2=422, f=function() conSend(49,tpt.set_pause()==0 and \"\\1\" or \"\\0\") end},\n\011[\"deco\"] = {x1=gfx.WIDTH-16, y1=33, x2=gfx.WIDTH-2, y2=47, f=function() if jacobsmod and (L.tabs or L.ctrl) then return end conSend(51,tpt.decorations_enable()==0 and \"\\1\" or \"\\0\") end},\n\011[\"newt\"] = {x1=gfx.WIDTH-16, y1=49, x2=gfx.WIDTH-2, y2=63, f=function() if jacobsmod and (L.tabs or L.ctrl) then return end conSend(54,tpt.newtonian_gravity()==0 and \"\\1\" or \"\\0\") end},\n\011[\"ambh\"] = {x1=gfx.WIDTH-16, y1=65, x2=gfx.WIDTH-2, y2=79, f=function() if jacobsmod and (L.tabs or L.ctrl) then return end conSend(53,tpt.ambient_heat()==0 and \"\\1\" or \"\\0\") end},\n}\nif jacobsmod then\n\011tpt_buttons[\"tab\"] = {x1=gfx.WIDTH-16, y1=1, x2=gfx.WIDTH-2, y2=15, f=function() L.tabs = not L.tabs end}\n\011tpt_buttons[\"tabs\"] = {x1=gfx.WIDTH-16, y1=17, x2=gfx.WIDTH-2, y2=147, f=function() if L.tabs or L.ctrl then L.sendScreen = true end end}\n\011tpt_buttons[\"opts\"] = {x1=465, y1=408, x2=479, y2=422, f=function() L.checkOpt=true end}\n\011tpt_buttons[\"clear\"] = {x1=481, y1=408, x2=497, y2=422, f=function() conSend(63) L.lastSave=nil end}\n\011tpt_buttons[\"disp\"] = {x1=595, y1=408, x2=611, y2=422,f=function() L.checkRen=2 L.pModes=getViewModes() end}\n\011tpt_buttons[\"open\"] = {x1=1, y1=408, x2=17, y2=422, f=function() if not L.ctrl then L.browseMode=1 else L.browseMode=2 end L.lastSave=sim.getSaveID() end}\nend\n\nlocal function inZoomWindow(x, y)\n\011if not L.isDrawing and (x < 0 or x >= sim.XRES or y < 0 or y >= sim.YRES) then\n\011\011return false\n\011end\n\011local snappedX, snappedY = x, y\n\011-- When the mouse is outside the window, TPT will snap coords to simulation area then check for zoom window\n\011if snappedX < 0 then snappedX = 0 elseif snappedX >= sim.XRES then snappedX = sim.XRES end\n\011if snappedY < 0 then snappedY = 0 elseif snappedY >= sim.YRES then snappedY = sim.YRES end\n\011local zoomX, zoomY = sim.adjustCoords(snappedX, snappedY)\n\011return zoomX ~= x or zoomY ~= y\nend\n\nlocal function sendMouseUpdate(mouseX, mouseY)\n\011L.realMouseX, L.realMouseY = mouseX, mouseY\n\011if inZoomWindow(mouseX, mouseY) then\n\011\011mouseX, mouseY = sim.adjustCoords(mouseX, mouseY)\011\n\011else\n\011\011if mouseX < 0 then mouseX = 0 end\n\011\011if mouseY < 0 then mouseY = 0 end\n\011\011if mouseX > gfx.WIDTH then mouseX = gfx.WIDTH end\n\011\011if mouseY > gfx.HEIGHT then mouseY = gfx.HEIGHT end\n\011end\n\n\011if L.mousex ~= mouseX or L.mousey ~= mouseY then\n\011\011local b1, b2, b3 = math.floor(mouseX / 16), ((mouseX % 16) * 16) + math.floor(mouseY / 256), (mouseY % 256)\n\011\011conSend(32, string.char(b1, b2, b3))\n\011\011L.mousex, L.mousey = mouseX, mouseY\n\011end\nend\n\nlocal function mouseDown(mouseX, mouseY, button)\n\011if L.chatHidden then\n\011\011showbutton:mouseDown(mouseX, mouseY, button)\n\011\011if not hooks_enabled then\n\011\011\011return true\n\011\011end\n\011end\n\011if L.stamp and button == 1 then\n\011\011L.stampx, L.stampy = mouseX, mouseY\n\011\011return true\n\011end\n\011if L.stamp or L.placeStamp then\n\011\011return true\n\011end\n\011if L.skipClick then\n\011\011L.skipClick = false\n\011\011return true\n\011end\n\011if chatwindow:mouseDown(mouseX, mouseY, button) then\n\011\011return false\n\011end\n\n\011sendMouseUpdate(mouseX, mouseY)\n\011local obut, oevnt = L.mButt, L.mEvent\n\011if button ~= obut or 1 ~= oevnt then\n\011\011L.mButt, L.mEvent = button, 1\n\011\011if mouseX >= 0 and mouseY >= 0 and mouseX < sim.XRES and mouseY < sim.YRES then\n\011\011\011L.isDrawing = true\n\011\011end\n\011\011conSend(33, string.char(L.mButt * 16 + L.mEvent))\n\011end\n\011\n\011-- Click inside button first\n\011if button==1 then\n\011\011for k, v in pairs(tpt_buttons) do\n\011\011\011if mouseX >= v.x1 and mouseX <= v.x2 and mouseY >= v.y1 and mouseY <= v.y2 then\n\011\011\011\011v.downInside = true\n\011\011\011end\n\011\011end\n\011end\nend\n\nlocal function mouseUp(mouseX, mouseY, button, reason)\n\011if L.chatHidden then\n\011\011showbutton:mouseUp(mouseX, mouseY, button)\n\011\011if not hooks_enabled then\n\011\011\011return true\n\011\011end\n\011end\n\011if L.stamp then\n\011\011if L.skipClick then\n\011\011\011L.skipClick = false\n\011\011\011return true\n\011\011end\n\011\011--stamp has been saved, make our own copy\n\011\011if button==1 then\n\011\011\011--save stamp ourself for data, delete it\n\011\011\011local sx,sy = mouseX, mouseY\n\011\011\011if sx<L.stampx then L.stampx,sx=sx,L.stampx end\n\011\011\011if sy<L.stampy then L.stampy,sy=sy,L.stampy end\n\011\011\011--cheap cut hook to send a clear\n\011\011\011if L.copying==1 then\n\011\011\011\011--maybe this is ctrl+x? 67 is clear area\n\011\011\011\011conSend(67,string.char(math.floor(L.stampx/16),((L.stampx%16)*16)+math.floor(L.stampy/256),(L.stampy%256),math.floor(sx/16),((sx%16)*16)+math.floor(sy/256),(sy%256)))\n\011\011\011end\n\011\011\011local w,h = sx-L.stampx,sy-L.stampy\n\011\011\011local stampName,fullName = saveStamp(L.stampx,L.stampy,w,h)\n\011\011\011sx,sy,L.stampx,L.stampy = math.ceil((sx+1)/4)*4,math.ceil((sy+1)/4)*4,math.floor(L.stampx/4)*4,math.floor(L.stampy/4)*4\n\011\011\011w,h = sx-L.stampx, sy-L.stampy\n\011\011\011local f = assert(io.open(fullName,\"rb\"))\n\011\011\011if L.copying then L.lastCopy = {data=f:read\"*a\",w=w,h=h} else L.lastStamp = {data=f:read\"*a\",w=w,h=h} end\n\011\011\011f:close()\n\011\011\011deleteStamp(stampName)\n\011\011end\n\011\011L.stamp=false\n\011\011L.copying=false\n\011end\n\011if L.placeStamp and reason == 0 then\n\011\011if L.skipClick then\n\011\011\011L.skipClick=false\n\011\011\011return true\n\011\011end\n\011\011if button==1 then\n\011\011\011local stm\n\011\011\011if L.copying then stm=L.lastCopy else stm=L.lastStamp end\n\011\011\011if stm then\n\011\011\011\011if not stm.data then\n\011\011\011\011\011--unknown stamp, send full screen on next step, how can we read last created stamp, timestamps on files?\n\011\011\011\011\011L.sendScreen = (jacobsmod and 2 or true)\n\011\011\011\011else\n\011\011\011\011\011--send the stamp\n\011\011\011\011\011if L.smoved then\n\011\011\011\011\011\011--moved from arrows or rotate, send area next frame\n\011\011\011\011\011\011L.placeStamp=false\n\011\011\011\011\011\011L.sendScreen=true\n\011\011\011\011\011\011return true\n\011\011\011\011\011end\n\011\011\011\011\011local sx,sy = mouseX-math.floor(stm.w/2),mouseY-math.floor((stm.h)/2)\n\011\011\011\011\011if sx<0 then sx=0 end\n\011\011\011\011\011if sy<0 then sy=0 end\n\011\011\011\011\011if sx+stm.w>sim.XRES-1 then sx=sim.XRES-stm.w end\n\011\011\011\011\011if sy+stm.h>sim.YRES-1 then sy=sim.YRES-stm.h end\n\011\011\011\011\011local b1,b2,b3 = math.floor(sx/16),((sx%16)*16)+math.floor(sy/256),(sy%256)\n\011\011\011\011\011local d = #stm.data\n\011\011\011\011\011conSend(66,string.char(b1,b2,b3,math.floor(d/65536),math.floor(d/256)%256,d%256)..stm.data)\n\011\011\011\011end\n\011\011\011end\n\011\011end\n\011\011L.placeStamp=false\n\011\011L.copying=false\n\011end\n\011\n\011if L.skipClick then\n\011\011L.skipClick = false\n\011\011return true\n\011end\n\011if chatwindow:mouseUp(mouseX, mouseY, button, reason) then\n\011\011return false\n\011end\n\n\011-- Ignore fake mouseups due to blur (don't send 0, 0 coordinate)\n\011-- Also ignore fake mouseups due to going into / outside of zoom window\n\011-- In both cases, tell other clients we're no longer holding the mouse, without causing it to draw the line\n\011if reason == 1 or reason == 2 then\n\011\011L.mButt, L.mEvent = button, 2\n\011\011L.isDrawing = false\n\011\011conSend(33, string.char(0 * 16 + L.mEvent))\n\011\011return\n\011end\n\n\011sendMouseUpdate(mouseX, mouseY)\n\011local obut, oevnt = L.mButt, L.mEvent\n\011if button ~= obut or 2 ~= oevnt then\n\011\011L.isDrawing = false\n\011\011L.mButt, L.mEvent = button, 2\n\011\011conSend(33, string.char(L.mButt * 16 + L.mEvent))\n\011end\n\n\011-- Up inside the button we started with\n\011if button == 1 then\n\011\011local ret = true\n\011\011for k,v in pairs(tpt_buttons) do\n\011\011\011if v.downInside and (mouseX>=v.x1 and mouseX<=v.x2 and mouseY>=v.y1 and mouseY<=v.y2) then\n\011\011\011\011if v.f() == false then ret = false end\n\011\011\011end\n\011\011\011v.downInside = nil\n\011\011end\n\011\011return ret\n\011end\nend\n\nlocal function mouseMove(mouseX, mouseY, dX, dY)\n\011if L.chatHidden then\n\011\011showbutton:mouseMove(mouseX, mouseY, dX, dY)\n\011\011if not hooks_enabled then\n\011\011\011return true\n\011\011end\n\011end\n\011if chatwindow:mouseMove(mouseX, mouseY, dX, dY) then\n\011\011return false\n\011end\n\n\011-- Always send mouse update, unless we're currently drawing and entered/exited the zoom window\n\011-- TPT sends a fake mouseup event in this case, but the mouse move happens first so we need to stop it ourselves\n\011local shouldBlockMove = L.isDrawing and not inZoomWindow(mouseX, mouseY) ~= inZoomWindow(L.realMouseX, L.realMouseY)\n\011if shouldBlockMove then\n\011\011L.isDrawing = false\n\011else\n\011\011sendMouseUpdate(mouseX, mouseY)\n\011end\n\n\011--Mouse hold, we MUST stay inside button or don't trigger on up\n\011if button == 1 then\n\011\011for k, v in pairs(tpt_buttons) do\n\011\011\011if v.downInside and (mouseX < v.x1 or mouseX > v.x2 or mouseY < v.y1 or mouseY > v.y2) then\n\011\011\011\011v.downInside = nil\n\011\011\011end\n\011\011end\n\011end\nend\n\nlocal function mouseWheel(mouseX, mouseY, wheel)\n\011if chatwindow.inputbox.focus and chatwindow:mouseWheel(mousex, mousey, wheel) then\n\011\011return false\n\011end\nend\n\nlocal keyFuncs = {\n\011--TAB\n\011[9] = function() if not jacobsmod or not L.ctrl then conSend(35) end end,\n\n\011--View modes 0-9\n\011[48] = function() conSend(48,\"\\10\") end,\n\011[49] = function() if L.shift then conSend(48,\"\\9\") tpt.display_mode(9)--[[force local display mode, screw debug check for now]] return false end conSend(48,\"\\0\") end,\n\011[50] = function() conSend(48,\"\\1\") end,\n\011[51] = function() conSend(48,\"\\2\") end,\n\011[52] = function() conSend(48,\"\\3\") end,\n\011[53] = function() conSend(48,\"\\4\") end,\n\011[54] = function() conSend(48,\"\\5\") end,\n\011[55] = function() conSend(48,\"\\6\") end,\n\011[56] = function() conSend(48,\"\\7\") end,\n\011[57] = function() conSend(48,\"\\8\") end,\n\n\011-- ins / del for replace mode\n\011[1073741897] = function() L.replacemode = bit.bxor(L.replacemode, 1) conSend(38, L.replacemode) end,\n\011[127] = function() L.replacemode = bit.bxor(L.replacemode, 2) conSend(38, L.replacemode) end,\n\n\011--Arrows for stamp adjust\n\011[273] = function() if L.placeStamp then L.smoved=true end end,\n\011[274] = function() if L.placeStamp then L.smoved=true end end,\n\011[275] = function() if L.placeStamp then L.smoved=true end end,\n\011[276] = function() if L.placeStamp then L.smoved=true end end\n}\n\nlocal scanFuncs = {\n\011--`, console\n\011[53] = function() if not L.shift and con.connected then infoText:reset(\"Console does not sync, use shift+` to open instead\") return false else jacobsmod_old_menu_check = true end end,\n\n\011--b, deco, pauses sim\n\011[5] = function() if L.ctrl then conSend(51,tpt.decorations_enable()==0 and \"\\1\" or \"\\0\") else conSend(49,\"\\1\") conSend(51,\"\\1\") end end,\n\n\011--c, copy\n\011[6] = function() if L.ctrl then L.stamp=true L.copying=true L.stampx = -1 L.stampy = -1 end end,\n\n\011--d key, debug, api broken right now\n\011--[7] = function() conSend(55) end,\n\n\011--F, frame step\n\011[9] = function() if not jacobsmod or not L.ctrl then conSend(50) end end,\n\n\011--H, HUD and intro text\n\011[11] = function() if L.ctrl and jacobsmod then return false end end,\n\n\011--I, invert pressure\n\011[12] = function() conSend(62) end,\n\n\011--K, stamp menu, abort our known stamp, who knows what they picked, send full screen?\n\011[14] = function() L.lastStamp={data=nil,w=0,h=0} L.placeStamp=true end,\n\n\011--L, last Stamp\n\011[15] = function() if L.lastStamp then L.placeStamp=true end end,\n\n\011--N, newtonian gravity or new save\n\011[17] = function() if jacobsmod and L.ctrl then L.sendScreen=2 L.lastSave=nil else conSend(54,tpt.newtonian_gravity()==0 and \"\\1\" or \"\\0\") end end,\n\n\011--O, old menu in jacobs mod\n\011[18] = function() if jacobsmod and not L.ctrl then jacobsmod_old_menu_check = true end end,\n\n\011--R, for stamp rotate or save reload\n\011[21] = function()\n\011\011if L.placeStamp then\n\011\011\011L.smoved = true\n\011\011\011if L.shift then\n\011\011\011\011return\n\011\011\011end\n\011\011\011L.rotate = not L.rotate\n\011\011elseif L.ctrl then\n\011\011\011if L.lastSave then\n\011\011\011\011conSend(70)\n\011\011\011\011infoText:reset(\"Sent reload command\") \n\011\011\011else\n\011\011\011\011L.sendScreen = true\n\011\011\011\011infoText:reset(\"Send sync\") \n\011\011\011end\n\011\011end\n\011end,\n\n\011--S, stamp\n\011[22] = function() if (L.lastStick2 and not L.ctrl) or (jacobsmod and L.ctrl) then return end L.stamp=true L.stampx = -1 L.stampy = -1 end,\n\n\011--T, tabs\n\011[23] = function() if jacobsmod then L.tabs = not L.tabs end end,\n\n\011--U, ambient heat toggle\n\011[24] = function() conSend(53,tpt.ambient_heat()==0 and \"\\1\" or \"\\0\") end,\n\n\011--V, paste the copystamp\n\011[25] = function() if L.ctrl and L.lastCopy then L.placeStamp=true L.copying=true end end,\n\n\011--W, gravity mode\n\011[26] = function() if L.lastStick2 and not L.ctrl then return end conSend(58,string.char((sim.gravityMode()+1)%3)) return true end,\n\n\011--X, cut a copystamp and clear\n\011[27] = function() if L.ctrl then L.stamp=true L.copying=1 L.stampx = -1 L.stampy = -1 end end,\n\n\011--Y, air mode\n\011[28] = function() if L.ctrl then L.sendScreen = true else conSend(59,string.char((sim.airMode()+1)%5)) return true end end,\n\n\011--Z\n\011[29] = function() if L.ctrl then L.sendScreen = true else L.skipClick=true end end,\n\n\011--ESC\n\011[41] = function() if not L.chatHidden then L.chatHidden = true TPTMP.chatHidden = true return false end end,\n\n\011--space, pause toggle\n\011[44] = function() conSend(49,tpt.set_pause()==0 and \"\\1\" or \"\\0\") end,\n\n\011--= key, pressure/spark reset\n\011[46] = function() if L.ctrl then conSend(60) else conSend(61) end end,\n\n\011--;, replace mode or specific delete\n\011[59] = function() if L.ctrl then  L.replacemode = bit.bxor(L.replacemode, 2) else  L.replacemode = bit.bxor(L.replacemode, 1) end conSend(38, L.replacemode) end,\n\n\011--F1 , intro text\n\011[58] = function() if jacobsmod then return false end end,\n\n\011--F5 , save reload\n\011[62] = function()\n\011\011if L.lastSave then\n\011\011\011conSend(70)\n\011\011\011infoText:reset(\"Sent reload command\") \n\011\011else\n\011\011\011L.sendScreen = true\n\011\011\011infoText:reset(\"Sent sync\") \n\011\011end\n\011end,\n}\nlocal scanUnpressFuncs = {\n\011--Z\n\011[29] = function() L.skipClick=false if L.alt then L.skipClick=true end end,\n}\n\nlocal function keypress(key, scan, rep, shift, ctrl, alt)\n\011if shift and not L.shift then\n\011\011L.shift = true\n\011\011conSend(36, string.char(17))\n\011end\n\011if ctrl and not L.ctrl then\n\011\011L.ctrl = true\n\011\011conSend(36, string.char(1))\n\011end\n\011if alt and not L.alt then\n\011\011L.alt = true\n\011\011conSend(36, string.char(33))\n\011end\n\n\011local check = chatwindow:keypress(key, scan, rep, shift, ctrl, alt)\n\011if type(check) == \"boolean\" then\n\011\011return not check\n\011end\n\011\n\011if rep then return end\n\n\011if scanFuncs[scan] then\n\011\011ret = scanFuncs[scan]()\n\011\011if ret ~= nil then\n\011\011\011return ret\n\011\011end\n\011elseif keyFuncs[key] then\n\011\011ret = keyFuncs[key]()\n\011\011if ret ~= nil then\n\011\011\011return ret\n\011\011end\n\011end\nend\nlocal function keyrelease(key, scan, rep, shift, ctrl, alt)\n\011if not shift and L.shift then\n\011\011L.shift = false\n\011\011conSend(36, string.char(16))\n\011end\n\011if not ctrl and L.ctrl then\n\011\011L.ctrl = false\n\011\011conSend(36, string.char(0))\n\011end\n\011if not alt and L.alt then\n\011\011L.alt = false\n\011\011conSend(36, string.char(32))\n\011end\n\n\011if rep then return end\n\n\011if scanUnpressFuncs[scan] then\n\011\011ret = scanUnpressFuncs[scan]()\n\011\011if ret~= nil then\n\011\011\011return ret\n\011\011end\n\011end\nend\nlocal function textinput(text)\n\011chatwindow:textinput(text)\nend\nlocal function blur()\n\011if L.shift then\n\011\011L.shift = false\n\011\011conSend(36, string.char(16))\n\011end\n\011if L.ctrl then\n\011\011L.ctrl = false\n\011\011conSend(36, string.char(0))\n\011end\n\011if L.alt then\n\011\011L.alt = false\n\011\011conSend(36, string.char(32))\n\011end\nend\nfunction TPTMP.disableMultiplayer()\n\011evt.unregister(evt.tick, step)\n\011evt.unregister(evt.mousedown, mouseDown)\n\011evt.unregister(evt.mouseup, mouseUp)\n\011evt.unregister(evt.mousemove, mouseMove)\n\011evt.unregister(evt.mousewheel, mouseQheel)\n\011evt.unregister(evt.keypress, keypress)\n\011evt.unregister(evt.keyrelease, keyrelease)\n\011evt.unregister(evt.textinput, textinput)\n\011evt.unregister(evt.blur, blur)\n\011TPTMP = nil\n\011disconnected(\"TPTMP unloaded\")\nend\n\nfunction TPTMP.enableMultiplayer()\n\011hooks_enabled = true\n\011TPTMP.enableMultiplayer = nil\n\011debug.sethook(nil,\"\",0)\n\011if jacobsmod then\n\011\011--clear intro text tooltip\n\011\011gfx.toolTip(\"\", 0, 0, 0, 4)\n\011end\nend\nTPTMP.con = con\nTPTMP.chatHidden = true\nevt.register(evt.tick, step)\nevt.register(evt.mousedown, mouseDown)\nevt.register(evt.mouseup, mouseUp)\nevt.register(evt.mousemove, mouseMove)\nevt.register(evt.mousewheel, mouseWheel)\nevt.register(evt.keypress, keypress)\nevt.register(evt.keyrelease, keyrelease)\nevt.register(evt.textinput, textinput)\nevt.register(evt.blur, blur)\n\n\n--Cracker1000's TPT unleashed script version 6.0\n--For beta version warning, 1 is on.\nlocal beta = 0\nif beta == 1 then\ntpt.message_box(\"You are using beta version!\",\"Some features might not work.\")\nend\n\nlocal toggle = Button:new(320,0,13,8, \"V\", \"Toggle additional menus.\")\n\nlocal deletesparkButton = Button:new(320,6,75,10,\"Interface\", \"shows UI related stuff.\")\nlocal UIhidey = Button:new(410,6,40,10,\"Hide\", \"Hides the UI\")\nlocal UIhiden = Button:new(410,16,40,10,\"Show\", \"Shows the UI\")\n\nlocal FPS = Button:new(320,26,75,10, \"Frame limiter\", \"Turns the frame limiter on/off.\")\nlocal FPS1 = Button:new(410,26,80,10, \"On\", \"Turns the frame limiter on.\")\nlocal FPS2 = Button:new(410,36,80,10, \"Off\", \"Turns the frame limiter off.\")\n\nlocal screen= Button:new(320,46,75,10,\"Screenshot\", \"Take a screen shot.\")\nlocal screen1= Button:new(300,0,15,9,\"Y\", \"Take the screen shot.\")\nlocal screen2= Button:new(325,0,15,9,\"N\", \"Cancel the screen shot.\")\n\nlocal reset= Button:new(320,66,75,10,\"Reset\", \"Reset everything.\")\n\nlocal info= Button:new(320,86,75,10,\"Version check\", \"Check for latest version.\")\n\nlocal Ruler = Button:new(320,106,75,10, \"Ruler\", \"Toggles in game hud ruler.\")\nlocal Ry = Button:new(410,106,40,10,\"Hide\", \"Hides the Ruler\")\nlocal Rn = Button:new(410,116,40,10,\"Show\", \"Shows the Ruler\")\n\nlocal mp = Button:new(320,126,75,10,\"Multiplayer\", \"Options for multiplayer script\")\nlocal mp1 = Button:new(410,126,75,10,\"Download\", \"Download the script (connection required!)\")\nlocal mp2 = Button:new(410,136,75,10,\"Disable\", \"Disable the muyltiplayer script.\")\n\n\nlocal rc = Button:new(320,146,75,10,\"Record\", \"Options for recording frames\")\nlocal rc1 = Button:new(410,146,40,10,\"Start\", \"Starts recording\")\nlocal rc2 = Button:new(410,156,40,10,\"Stop\",\"Stops recording\")\n\nlocal bg = Button:new(320,166,75,10,\"Backgrounds\", \"Sets different backgrounds.\")\nlocal bgI = Button:new(470,166,30,10,\"^\", \"Increase brightness\")\nlocal bgD = Button:new(470,176,30,10,\"v\", \"Decrease brightness\")\nlocal bg1 = Button:new(410,166,60,10,\"BLACK\", \"Default\")\nlocal bg2 = Button:new(410,176,60,10,\"BLUE\", \"Blue background\")\nlocal bg3 = Button:new(410,186,60,10,\"RED\", \"Red background\")\nlocal bg4 = Button:new(410,196,60,10,\"GREEN\", \"Green background\")\nlocal bg5 = Button:new(410,206,60,10,\"YELLOW\", \"Yellow background\")\n\nlocal bug = Button:new(320,186,75,10,\"Bug report\", \"Direct to Mod thread for bug report.\")\n\nlocal bar = Button:new(320,206,75,10,\"Top bar\", \"Toggle top bar\")\nlocal bary = Button:new(410,206,75,10,\"Show\", \"Shows the bar at top\")\nlocal barn = Button:new(410,216,75,10,\"Hide\", \"Hides the bar\")\n\n\nlocal wiki  =  Button:new(320,226,75,10,\"Wiki\", \"Element wiki!\")\nlocal wikiy = Button:new(410,226,75,10,\"Show\", \"Open wiki\")\nlocal wikin = Button:new(410,236,75,10,\"Hide\", \" Close wiki!\")\nlocal wikin2 = Button:new(10,350,75,20,\"Hide wiki \", \" Close wiki!\")\n\nlocal hide= Button:new(320,246,15,10, \"^\", \"Hide.\")\n\n\nfunction clearm()\ninterface.removeComponent(reset)\ninterface.removeComponent(screen)\ninterface.removeComponent(FPS)\ninterface.removeComponent(deletesparkButton)\ninterface.removeComponent(hide)\ninterface.removeComponent(info)\ninterface.removeComponent(Ruler)\ninterface.removeComponent(mp)\ninterface.removeComponent(rc)\ninterface.removeComponent(bg)\ninterface.removeComponent(bug)\ninterface.removeComponent(bar)\ninterface.removeComponent(wiki)\nend\n\nfunction clearsb()\ninterface.removeComponent(UIhiden)\ninterface.removeComponent(UIhidey)\ninterface.removeComponent(Ry)\ninterface.removeComponent(Rn)\ninterface.removeComponent(rc1)\ninterface.removeComponent(rc2)\ninterface.removeComponent(bg1)\ninterface.removeComponent(bg2)\ninterface.removeComponent(bg3)\ninterface.removeComponent(bg4)\ninterface.removeComponent(bg5)\ninterface.removeComponent(bgI)\ninterface.removeComponent(bgD)\ninterface.removeComponent(screen1)\ninterface.removeComponent(screen2)\ninterface.removeComponent(FPS1)\ninterface.removeComponent(FPS2)\ninterface.removeComponent(mp1)\ninterface.removeComponent(mp2)\ninterface.removeComponent(bary)\ninterface.removeComponent(barn)\ninterface.removeComponent(wikiy)\ninterface.removeComponent(wikin)\ninterface.removeComponent(wikin2)\nend\n\nclearm()\nbug:action(function(sender)\nplatform.openLink(\"https://powdertoy.co.uk/Discussions/Thread/View.html?Thread=23279\")\nend)\n\nwiki:action(function(sender)\nclearsb()\ninterface.addComponent(wikiy)\ninterface.addComponent(wikin)\nend)\n\n\nfunction wikii()\ngfx.drawText(10,10, \" WELCOME TO IN GAME WIKI: \\n\\n WAll: Hybrid of walls and elements.\\n VLSN: Velocity sensor.  Creates SPRK when nearby velocity's higher than it's temp, Configured with .tmp modes.\\n TIMC: Time based convertor, converts into it's ctype when sparked with PSCN. Timer set using .tmp, default is 100.\\n FUEL: FUEL. Fuel having high calorific value.\\n THRM: Thermostat. Sets the temp of surrounding according to its own temp.\\n CLNT: Coolant. Cools down the temp of the system, evaporates at high temperatures. Use .tmp to configure. \\n DMRN: Demron. Radioactive shielding material and a better insulator.\\n FNTC & FPTC: Faster versions of NTCT and PTCT.\\n PINV: Powered Invisible, allows particles to move through when activated.\\n UVRD: Ultra violet radiations, interacts with different elements as irl.\\n SUN.: Sun, PLNT grow in direction of sunlight, emits radiation, makes PSCN spark and heals STKMs.\\n LITH: Lithium ion battery, Use with PSCN and NSCN. Charges with INST when deactivated. Temp sets capacity.\\n .tmp2 = 1 activates powered battery mode.\\n Reacts with different elements like O2, WATR, ACID etc as IRL.\\n LED:  Light Emmiting Diode. Use with PSCN and NSCN. Temp sets the brightness.\\n Different .tmp2 modes: 0 = white, 1= red, 2= green, 3 =blue, 4= yellow and 5 = pink. \\n QGP: Quark Gluon Plasma, bursts out radiation afer sometime. Extremely violent. \\n Turns into Purple QGP when under 100C which is stable.\\n TMPS: .tmp sensor, creats sprk when there is an element with higher .tmp than its temp.\\n PHOS: White, slowly turns into red phosphorus. Burns blue when in contact with O2.\\n Melts at 45C.\")\nend\n\nwikiy:action(function(sender)\nclearsb()\nclearm()\ninterface.addComponent(toggle)\ntpt.register_step(wikii)\ntpt.register_step(backb)\ninterface.addComponent(wikin2)\nend)\n\nwikin:action(function(sender)\nclearsb()\ntpt.unregister_step(wikii)\ntpt.unregister_step(backb)\nend)\n\nwikin2:action(function(sender)\nclearsb()\nclearm()\ntpt.unregister_step(wikii)\ntpt.unregister_step(backb)\ntpt.hud(1)\nend)\n\nbg:action(function(sender)\nclearsb()\ninterface.addComponent(bg1)\ninterface.addComponent(bg2)\ninterface.addComponent(bg3)\ninterface.addComponent(bg4)\ninterface.addComponent(bg5)\ninterface.addComponent(bgI)\ninterface.addComponent(bgD)\nend)\n\nlocal as = 60\n\nfunction backb()\ntpt.fillrect(0,0,610,385,0,0,255,as)\nend\nfunction backr()\ntpt.fillrect(0,0,610,385,255,0,0,as)\nend\nfunction backg()\ntpt.fillrect(0,0,610,385,0,255,0,as)\nend\nfunction backy()\ntpt.fillrect(0,0,610,385,255,255,0,as)\nend\n\nfunction clearbg()\ninterface.removeComponent(bgI)\ninterface.removeComponent(bgD)\ninterface.removeComponent(bg5)\ninterface.removeComponent(bg4)\ninterface.removeComponent(bg3)\ninterface.removeComponent(bg2)\ninterface.removeComponent(bg1)\ntpt.unregister_step(backy)\ntpt.unregister_step(backb)\ntpt.unregister_step(backr)\ntpt.unregister_step(backg)\nend\n\ntgr = 0\ntgg  = 0\ntgb = 200\n\nbgI:action(function(sender)\nas = as+30\nend)\nbgD:action(function(sender)\nas = as-30\nend)\n\nbg1:action(function(sender)\nclearbg()\ntgr = 0\ntgg  = 0\ntgb = 200\nend)\nbg2:action(function(sender)\ntgr = 0\ntgg  = 0\ntgb = 200\nclearbg()\ntpt.register_step(backb)\nend)\n\nbg3:action(function(sender)\ntgr = 200\ntgg  = 0\ntgb = 0\nclearbg()\ntpt.register_step(backr)\nend)\n\nbg4:action(function(sender)\ntgr = 0\ntgg  = 200\ntgb = 0\nclearbg()\ntpt.register_step(backg)\nend)\n\nbg5:action(function(sender)\ntgr = 200\ntgg  = 200\ntgb = 0\nclearbg()\ntpt.register_step(backy)\nend)\n\nfunction topbar()\ntpt.drawline(1, 0, 310, 0, tgr, tgg, tgb,200)\ntpt.drawline(340, 0, 610, 0,tgr, tgg, tgb, 200)\nend\n\ntpt.register_step(topbar)\n\nbar:action(function(sender)\nclearsb()\ninterface.addComponent(bary)\ninterface.addComponent(barn)\nend)\n\nbary:action(function(sender)\ntpt.register_step(topbar)\nclearsb()\nend)\n\n\nbarn:action(function(sender)\ntpt.unregister_step(topbar)\nclearsb()\nend)\n\nrc:action(function(sender)\nclearsb()\ninterface.addComponent(rc1)\ninterface.addComponent(rc2)\nend)\n\n\nrc1:action(function(sender)\ntpt.record(true)\ninterface.removeComponent(rc1)\ninterface.removeComponent(rc2)\n\nend)\n\nrc2:action(function(sender)\ntpt.record(false)\ninterface.removeComponent(rc1)\ninterface.removeComponent(rc2)\nend)\n\nmp:action(function(sender)\nclearsb()\ninterface.addComponent(mp1)\ninterface.addComponent(mp2)\nend)\n\nmp1:action(function(sender)\ntpt.getscript(2, \"autorun.lua\", 1)\ninterface.removeComponent(mp1)\ninterface.removeComponent(mp2)\nend)\n\nmp2:action(function(sender)\nTPTMP.disableMultiplayer()\ninterface.removeComponent(mp1)\ninterface.removeComponent(mp2)\nend)\n\nRuler:action(function(sender)\nclearsb()\ninterface.addComponent(Ry)\ninterface.addComponent(Rn)\nend)\n\n\nRy:action(function(sender)\ntpt.setdebug(0X0)\ninterface.removeComponent(Ry)\ninterface.removeComponent(Rn)\nend)\n\nRn:action(function(sender)\n\ntpt.setdebug(0X4)\ninterface.removeComponent(Ry)\ninterface.removeComponent(Rn)\nend)\n\n\n\ndeletesparkButton:action(function(sender)\nclearsb()\ntpt.hud(0)\ninterface.addComponent(UIhidey)\ninterface.addComponent(UIhiden)\nend)\n\n\nfunction UIhide()\ntpt.hud(0)\ntpt.fillrect(0,385,614,40,0,0,0,255)\ntpt.fillrect(612,0,17,424,0,0,0,255)\nend\nUIhidey:action(function(sender)\ntpt.hud(0)\ninterface.removeComponent(UIhiden)\ninterface.removeComponent(UIhidey)\ntpt.unregister_step(topbar)\ntpt.register_step(UIhide)\nend)\n\nUIhiden:action(function(sender)\ntpt.hud(0)\ninterface.removeComponent(UIhiden)\ninterface.removeComponent(UIhidey)\ntpt.unregister_step(UIhide)\nend)\n\nFPS:action(function(sender)\nclearsb()\ninterface.addComponent(FPS1)\ninterface.addComponent(FPS2)\nend)\n\n\nFPS1:action(function(sender)\ninterface.removeComponent(FPS1)\ninterface.removeComponent(FPS2)\ntpt.setfpscap(60)\nend)\n\nFPS2:action(function(sender)\ninterface.removeComponent(FPS1)\ninterface.removeComponent(FPS2)\ntpt.setfpscap(160)\nend)\n\nscreen1:action(function(sender)\ninterface.removeComponent(screen1)\ninterface.removeComponent(screen2)\ntpt.drawtext(327,368,\"Cracker1000's script\", 0 , 0,255, 255)\ntpt.screenshot(0)\ninterface.addComponent(toggle)\nend)\n\nscreen2:action(function(sender)\ninterface.removeComponent(screen1)\ninterface.removeComponent(screen2)\ninterface.addComponent(toggle)\nend)\n\nscreen:action(function(sender)\nclearsb()\nclearm()\ninterface.addComponent(screen1)\ninterface.addComponent(screen2)\nend)\n\nreset:action(function(sender)\ntgr = 0\ntgg  = 0\ntgb = 200\ntpt.unregister_step(wikii)\ntpt.unregister_step(topbar)\ntpt.unregister_step(UIhide)\ntpt.display_mode(3)\ntpt.watertest(0)\nsim.edgeMode(0) \ntpt.setfpscap(60)\ntpt.setwindowsize(1)\ntpt.newtonian_gravity(0)\ntpt.decorations_enable(0)\nsim.resetPressure()\ntpt.ambient_heat(0)\nsim.resetTemp()\ntpt.reset_velocity(1,380,300,300)\nclearbg()\nclearsb()\ntpt.setdebug(0X0)\nsim.clearSim()\nend)\n\ninfo:action(function(sender)\ntpt.message_box(\"Cracker1000's Script Check\",\"Version 6.0\")\nend)\n\nhide:action(function(sender)\ninterface.addComponent(toggle)\nclearsb()\nclearm()\ntpt.hud(1)\ntpt.set_pause(0)\nend)\n\ntoggle:action(function(sender)\ntpt.set_pause(1)\ntpt.hud(0)\ninterface.removeComponent(screen1)\ninterface.removeComponent(screen2)\ninterface.addComponent(deletesparkButton)\ninterface.addComponent(FPS)\ninterface.addComponent(screen)\ninterface.addComponent(info)\ninterface.addComponent(reset)\ninterface.addComponent(hide)\ninterface.addComponent(Ruler)\ninterface.addComponent(rc)\ninterface.addComponent(bg)\ninterface.addComponent(mp)\ninterface.addComponent(bug)\ninterface.addComponent(bar)\ninterface.addComponent(wiki)\ninterface.removeComponent(toggle)\nend)\ninterface.addComponent(toggle)\n\n\n\n";
	luaL_loadbuffer(l, crackerk_luac, crackerk_luac_sz, "@crackerk.lua");
	lua_pcall(l, 0, 0, 0);
#else
	unsigned int size = 0;
	const char* data = NULL;
	Platform::LoadFileInResource(IDI_CRK, LUASCRIPT, size, data);
	char *buffer = new char[size + 1];
	::memcpy(buffer, data, size);
	buffer[size] = 0;
	luaL_loadbuffer(l, buffer, size, "@crackerk.lua");
	lua_pcall(l, 0, 0, 0);
	delete[] buffer;
#endif
}
#endif
